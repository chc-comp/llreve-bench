(set-info :origin "Horn problem converted to SMT-LIB2 using Eldarica (https://github.com/uuverifiers/eldarica)")
(set-logic HORN)
(declare-fun INV_MAIN_42 (Int Int Int Int Int Int) Bool)
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))(=> (and (and (and (and (= (* (- 1) A) 0) (= (* (- 1) B) (- 1))) (= (* (- 1) D) (- 1))) (= (* (- 1) E) (- 1))) (= C (+ F 1))) (INV_MAIN_42 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) (not (and (and (and (not (= A B)) (not (>= (+ C (- 1)) 0))) (not (>= (+ D (- 1)) 0))) (INV_MAIN_42 E A D F B C)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int))(=> (and (and (and (and (and (and (and (and (= (+ G H) A) (= (+ G H) B)) (= (+ I (- 1)) C)) (= (+ J K) D)) (= (+ J K) E)) (= (+ L (- 1)) F)) (>= (+ L (- 1)) 0)) (>= (+ I (- 1)) 0)) (INV_MAIN_42 G H I J K L)) (INV_MAIN_42 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int))(=> (and (and (and (and (and (= (+ G H) A) (= (+ G H) B)) (= (+ I (- 1)) C)) (not (>= (+ F (- 1)) 0))) (>= (+ I (- 1)) 0)) (INV_MAIN_42 G H I D E F)) (INV_MAIN_42 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int))(=> (and (and (and (and (and (= (+ G H) D) (= (+ G H) E)) (= (+ I (- 1)) F)) (not (>= (+ C (- 1)) 0))) (>= (+ I (- 1)) 0)) (INV_MAIN_42 A B C G H I)) (INV_MAIN_42 A B C D E F))))
(check-sat)
