(set-info :origin "Horn problem converted to SMT-LIB2 using Eldarica (https://github.com/uuverifiers/eldarica)")
(set-logic HORN)
(declare-fun INV_MAIN_42 (Int Int Int Int Int Int) Bool)
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))(=> (and (and (and (and (= (* (- 1) A) (- 1)) (= (* (- 1) B) 0)) (= (* (- 1) D) 0)) (= (* (- 1) E) 0)) (= C F)) (INV_MAIN_42 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) (not (and (and (and (not (= A B)) (not (>= (+ (- C D) (- 1)) 0))) (not (>= E F))) (INV_MAIN_42 F A E D B C)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int))(=> (and (and (and (and (and (and (= (+ G 1) A) (= (+ H 2) B)) (= (+ I 1) D)) (= (+ J 2) E)) (>= (+ (- F I) (- 1)) 0)) (>= C G)) (INV_MAIN_42 G H C I J F)) (INV_MAIN_42 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int))(=> (and (and (and (and (= (+ G 1) A) (= (+ H 2) B)) (not (>= (+ (- F D) (- 1)) 0))) (>= C G)) (INV_MAIN_42 G H C D E F)) (INV_MAIN_42 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int))(=> (and (and (and (and (= (+ G 1) D) (= (+ H 2) E)) (not (>= C A))) (>= (+ (- F G) (- 1)) 0)) (INV_MAIN_42 A B C G H F)) (INV_MAIN_42 A B C D E F))))
(check-sat)
