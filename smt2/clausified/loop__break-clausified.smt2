(set-info :origin "Horn problem converted to SMT-LIB2 using Eldarica (https://github.com/uuverifiers/eldarica)")
(set-logic HORN)
(declare-fun INV_MAIN_42 (Int Int Int Int) Bool)
(assert (not false))
(assert (not false))
(assert (not false))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (and (and (= (* (- 1) A) 0) (= (* (- 1) C) (- 10))) (= B D)) (INV_MAIN_42 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int)) (not (and (and (and (not (= A (- 10 B))) (= B (- 10 C))) (= A D)) (INV_MAIN_42 A D B C)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int)) (not (and (and (and (and (not (= A (- 10 (+ B (- 1))))) (not (>= (+ B (- 1)) 0))) (not (= B (- 10 C)))) (= A D)) (INV_MAIN_42 A D B C)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int)) (not (and (and (and (and (not (= (+ A 1) (- 10 B))) (= B (- 10 C))) (not (<= (+ A 1) 10))) (not (= A D))) (INV_MAIN_42 A D B C)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int)) (not (and (and (and (and (and (not (= (+ A 1) (- 10 (+ B (- 1))))) (not (>= (+ B (- 1)) 0))) (not (= B (- 10 C)))) (not (<= (+ A 1) 10))) (not (= A D))) (INV_MAIN_42 A D B C)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))(=> (and (and (and (and (and (and (= (+ E 1) A) (= (+ F (- 1)) C)) (>= (+ F (- 1)) 0)) (not (= F (- 10 D)))) (<= (+ E 1) 10)) (not (= E B))) (INV_MAIN_42 E B F D)) (INV_MAIN_42 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))(=> (and (and (and (and (= (+ E 1) A) (not (and (not (= C (- 10 D))) (>= (+ C (- 1)) 0)))) (<= (+ E 1) 10)) (not (= E B))) (INV_MAIN_42 E B C D)) (INV_MAIN_42 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))(=> (and (and (and (and (= (+ E (- 1)) C) (not (and (not (= A B)) (<= (+ A 1) 10)))) (>= (+ E (- 1)) 0)) (not (= E (- 10 D)))) (INV_MAIN_42 A B E D)) (INV_MAIN_42 A B C D))))
(check-sat)
