(set-info :origin "Horn problem converted to SMT-LIB2 using Eldarica (https://github.com/uuverifiers/eldarica)")
(set-logic HORN)
(declare-fun INV_MAIN_42 (Int Int Int Int) Bool)
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (and (and (and (and (= (* (- 1) A) 0) (= (* (- 1) C) 0)) (>= D 0)) (>= B 0)) (= B D)) (INV_MAIN_42 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int)) (not (and (and (and (not (= A (+ B 1))) (not (>= (+ C (- 1)) 0))) (not (>= D 0))) (INV_MAIN_42 A D B C)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int))(=> (and (and (and (and (and (and (= (+ E 1) A) (= (+ F (- 1)) B)) (= (+ G 1) C)) (= (+ H (- 1)) D)) (>= (+ H (- 1)) 0)) (>= F 0)) (INV_MAIN_42 E F G H)) (INV_MAIN_42 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))(=> (and (and (and (and (= (+ E 1) A) (= (+ F (- 1)) B)) (not (>= (+ D (- 1)) 0))) (>= F 0)) (INV_MAIN_42 E F C D)) (INV_MAIN_42 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))(=> (and (and (and (and (= (+ E 1) C) (= (+ F (- 1)) D)) (not (>= B 0))) (>= (+ F (- 1)) 0)) (INV_MAIN_42 A B E F)) (INV_MAIN_42 A B C D))))
(check-sat)
