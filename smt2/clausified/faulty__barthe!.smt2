(set-info :origin "Horn problem converted to SMT-LIB2 using Eldarica (https://github.com/uuverifiers/eldarica)")
(set-logic HORN)
(declare-fun INV_MAIN_42 (Int Int Int Int Int Int Int Int) Bool)
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int))(=> (and (and (and (and (and (= (* (- 1) B) 0) (= (* (- 1) D) 0)) (= (* (- 1) E) 0)) (= (* (- 1) H) 0)) (= A F)) (= C G)) (INV_MAIN_42 A B C D E F G H))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int)) (not (and (and (and (not (= A B)) (not (>= (+ (- C D) (- 1)) 0))) (not (>= (+ (- E F) (- 1)) 0))) (INV_MAIN_42 G F E A D H C B)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int))(=> (and (and (and (and (and (and (and (and (= (+ I 1) B) (= (+ J (+ (* 5 I) A)) D)) (= (+ K 1) E)) (= (+ L 5) F)) (= (+ M L) H)) (not (= (+ K (- 10)) 0))) (>= (+ (- G K) (- 1)) 0)) (>= (+ (- C I) (- 1)) 0)) (INV_MAIN_42 A I C J K L G M)) (INV_MAIN_42 A B C D E F G H))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int))(=> (and (and (and (and (and (and (and (and (= (+ I 1) B) (= (+ J (+ (* 5 I) A)) D)) (= (+ K 1) E)) (= (* (- 1) F) (- 10))) (= (+ L M) H)) (= (+ K (- 10)) 0)) (>= (+ (- G K) (- 1)) 0)) (>= (+ (- C I) (- 1)) 0)) (INV_MAIN_42 A I C J K M G L)) (INV_MAIN_42 A B C D E F G H))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int))(=> (and (and (and (and (= (+ I 1) B) (= (+ J (+ (* 5 I) A)) D)) (not (>= (+ (- G E) (- 1)) 0))) (>= (+ (- C I) (- 1)) 0)) (INV_MAIN_42 A I C J E F G H)) (INV_MAIN_42 A B C D E F G H))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int))(=> (and (and (and (and (and (and (= (+ I 1) E) (= (+ J 5) F)) (= (+ K J) H)) (not (= (+ I (- 10)) 0))) (not (>= (+ (- C B) (- 1)) 0))) (>= (+ (- G I) (- 1)) 0)) (INV_MAIN_42 A B C D I J G K)) (INV_MAIN_42 A B C D E F G H))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int))(=> (and (and (and (and (and (and (= (+ I 1) E) (= (* (- 1) F) (- 10))) (= (+ J K) H)) (= (+ I (- 10)) 0)) (not (>= (+ (- C B) (- 1)) 0))) (>= (+ (- G I) (- 1)) 0)) (INV_MAIN_42 A B C D I K G J)) (INV_MAIN_42 A B C D E F G H))))
(check-sat)
