(set-info :origin "Horn problem converted to SMT-LIB2 using Eldarica (https://github.com/uuverifiers/eldarica)")
(set-logic HORN)
(declare-fun INV_MAIN_42 (Int Int Int Int) Bool)
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (and (and (= (* (- 1) A) 0) (= (* (- 1) C) 0)) (= B D)) (INV_MAIN_42 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int)) (not (and (and (and (not (= A B)) (not (and (or (not (<= B 10)) (not (= B C))) (<= B 10)))) (not (and (<= A 10) (not (= A D))))) (INV_MAIN_42 A D B C)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))(=> (and (and (and (and (and (and (= (+ E 1) A) (= (+ F 1) C)) (not (= F D))) (<= F 10)) (not (= E B))) (<= E 10)) (INV_MAIN_42 E B F D)) (INV_MAIN_42 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))(=> (and (and (and (and (= (+ E 1) A) (not (and (or (not (<= C 10)) (not (= C D))) (<= C 10)))) (not (= E B))) (<= E 10)) (INV_MAIN_42 E B C D)) (INV_MAIN_42 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))(=> (and (and (and (and (= (+ E 1) C) (not (and (<= A 10) (not (= A B))))) (not (= E D))) (<= E 10)) (INV_MAIN_42 A B E D)) (INV_MAIN_42 A B C D))))
(check-sat)
