(set-info :origin "Horn problem converted to SMT-LIB2 using Eldarica (https://github.com/uuverifiers/eldarica)")
(set-logic HORN)
(declare-fun INV_MAIN_42 (Int Int Int Int) Bool)
(declare-fun INV_REC_f__1 (Int Int Int) Bool)
(declare-fun INV_REC_f__1_PRE (Int Int) Bool)
(declare-fun INV_REC_f__2 (Int Int Int) Bool)
(declare-fun INV_REC_f__2_PRE (Int Int) Bool)
(declare-fun INV_REC_f^f (Int Int Int Int Int Int) Bool)
(declare-fun INV_REC_f^f_PRE (Int Int Int Int) Bool)
(declare-fun INV_42 (Int Int Int Int Int Int) Bool)
(declare-fun INV_42_PRE (Int Int Int Int) Bool)
(declare-fun INV_42__1 (Int Int Int) Bool)
(declare-fun INV_42__1_PRE (Int Int) Bool)
(declare-fun INV_42__2 (Int Int Int) Bool)
(declare-fun INV_42__2_PRE (Int Int) Bool)
(assert (forall ((A Int) (B Int) (C Int) (D Int)) (not (and (and (and (not (<= A 0)) (<= B 0)) (= C D)) (= B A)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int)) (not (and (and (and (<= A 0) (not (<= B 0))) (= C D)) (= B A)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int)) (not (and (and (and (and (not (= A B)) (<= B 0)) (<= A 0)) (= C D)) (= A B)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))(=> (and (and (and (and (and (= (* (- 1) A) 0) (= (* (- 1) C) 0)) (not (<= D 0))) (not (<= B 0))) (= E F)) (= B D)) (INV_MAIN_42 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) (not (and (and (and (and (= (* (- 1) A) 0) (INV_REC_f__1 B A C)) (>= (+ (- (+ D (- 1)) E) (- 1)) 0)) (not (>= (+ (- (+ F (- 1)) B) (- 1)) 0))) (INV_MAIN_42 B F E D)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))(=> (and (and (and (= (* (- 1) B) 0) (>= (+ (- (+ C (- 1)) D) (- 1)) 0)) (not (>= (+ (- (+ E (- 1)) A) (- 1)) 0))) (INV_MAIN_42 A E D C)) (INV_REC_f__1_PRE A B))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) (not (and (and (and (and (= (* (- 1) A) 0) (INV_REC_f__2 B A C)) (not (>= (+ (- (+ D (- 1)) B) (- 1)) 0))) (>= (+ (- (+ E (- 1)) F) (- 1)) 0)) (INV_MAIN_42 F E B D)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))(=> (and (and (and (= (* (- 1) B) 0) (not (>= (+ (- (+ C (- 1)) A) (- 1)) 0))) (>= (+ (- (+ D (- 1)) E) (- 1)) 0)) (INV_MAIN_42 E D A C)) (INV_REC_f__2_PRE A B))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int)) (not (and (and (and (and (and (and (not (= A B)) (= (* (- 1) C) 0)) (= (* (- 1) D) 0)) (INV_REC_f^f E C F D A B)) (not (>= (+ (- (+ G (- 1)) F) (- 1)) 0))) (not (>= (+ (- (+ H (- 1)) E) (- 1)) 0))) (INV_MAIN_42 E H F G)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))(=> (and (and (and (and (= (* (- 1) B) 0) (= (* (- 1) D) 0)) (not (>= (+ (- (+ E (- 1)) C) (- 1)) 0))) (not (>= (+ (- (+ F (- 1)) A) (- 1)) 0))) (INV_MAIN_42 A F C E)) (INV_REC_f^f_PRE A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))(=> (and (and (and (and (= (+ E 1) A) (= (+ F 1) C)) (>= (+ (- (+ D (- 1)) F) (- 1)) 0)) (>= (+ (- (+ B (- 1)) E) (- 1)) 0)) (INV_MAIN_42 E B F D)) (INV_MAIN_42 A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int)) (not (and (and (not (<= A 0)) (<= B 0)) (INV_REC_f^f_PRE B C A D)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int)) (not (and (and (<= A 0) (not (<= B 0))) (INV_REC_f^f_PRE B C A D)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (and (and (<= C 0) (<= A 0)) (INV_REC_f^f_PRE A B C D)) (INV_REC_f^f A B C D A C))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int))(=> (and (and (and (and (and (= (* (- 1) G) 0) (= (* (- 1) H) 0)) (INV_42 G A H C E F)) (not (<= C 0))) (not (<= A 0))) (INV_REC_f^f_PRE A B C D)) (INV_REC_f^f A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))(=> (and (and (and (and (= (* (- 1) A) 0) (= (* (- 1) C) 0)) (not (<= D 0))) (not (<= B 0))) (INV_REC_f^f_PRE B E D F)) (INV_42_PRE A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) (not (and (and (and (and (= (* (- 1) A) 0) (INV_REC_f__1 B A C)) (>= (+ (- (+ D (- 1)) E) (- 1)) 0)) (not (>= (+ (- (+ F (- 1)) B) (- 1)) 0))) (INV_42_PRE B F E D)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))(=> (and (and (and (= (* (- 1) B) 0) (>= (+ (- (+ C (- 1)) D) (- 1)) 0)) (not (>= (+ (- (+ E (- 1)) A) (- 1)) 0))) (INV_42_PRE A E D C)) (INV_REC_f__1_PRE A B))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) (not (and (and (and (and (= (* (- 1) A) 0) (INV_REC_f__2 B A C)) (not (>= (+ (- (+ D (- 1)) B) (- 1)) 0))) (>= (+ (- (+ E (- 1)) F) (- 1)) 0)) (INV_42_PRE F E B D)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))(=> (and (and (and (= (* (- 1) B) 0) (not (>= (+ (- (+ C (- 1)) A) (- 1)) 0))) (>= (+ (- (+ D (- 1)) E) (- 1)) 0)) (INV_42_PRE E D A C)) (INV_REC_f__2_PRE A B))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int))(=> (and (and (and (and (and (= (* (- 1) G) 0) (= (* (- 1) H) 0)) (INV_REC_f^f A G C H E F)) (not (>= (+ (- (+ D (- 1)) C) (- 1)) 0))) (not (>= (+ (- (+ B (- 1)) A) (- 1)) 0))) (INV_42_PRE A B C D)) (INV_42 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))(=> (and (and (and (and (= (* (- 1) B) 0) (= (* (- 1) D) 0)) (not (>= (+ (- (+ E (- 1)) C) (- 1)) 0))) (not (>= (+ (- (+ F (- 1)) A) (- 1)) 0))) (INV_42_PRE A F C E)) (INV_REC_f^f_PRE A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int))(=> (and (and (and (and (and (= (+ A 1) G) (= (+ C 1) H)) (INV_42 G B H D E F)) (>= (+ (- (+ D (- 1)) C) (- 1)) 0)) (>= (+ (- (+ B (- 1)) A) (- 1)) 0)) (INV_42_PRE A B C D)) (INV_42 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))(=> (and (and (and (and (= (+ E 1) A) (= (+ F 1) C)) (>= (+ (- (+ D (- 1)) F) (- 1)) 0)) (>= (+ (- (+ B (- 1)) E) (- 1)) 0)) (INV_42_PRE E B F D)) (INV_42_PRE A B C D))))
(assert (forall ((A Int) (B Int))(=> (and (<= A 0) (INV_REC_f__1_PRE A B)) (INV_REC_f__1 A B A))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (and (and (and (= (* (- 1) D) 0) (INV_42__1 D A C)) (not (<= A 0))) (INV_REC_f__1_PRE A B)) (INV_REC_f__1 A B C))))
(assert (forall ((A Int) (B Int) (C Int))(=> (and (and (= (* (- 1) B) 0) (not (>= (+ (- (+ C (- 1)) A) (- 1)) 0))) (INV_42__1_PRE A C)) (INV_REC_f__1_PRE A B))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (and (and (and (= (* (- 1) D) 0) (INV_REC_f__1 A D C)) (not (>= (+ (- (+ B (- 1)) A) (- 1)) 0))) (INV_42__1_PRE A B)) (INV_42__1 A B C))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (and (and (and (= (+ A 1) D) (INV_42__1 D B C)) (>= (+ (- (+ B (- 1)) A) (- 1)) 0)) (INV_42__1_PRE A B)) (INV_42__1 A B C))))
(assert (forall ((A Int) (B Int))(=> (and (<= A 0) (INV_REC_f__2_PRE A B)) (INV_REC_f__2 A B A))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (and (and (and (= (* (- 1) D) 0) (INV_42__2 D A C)) (not (<= A 0))) (INV_REC_f__2_PRE A B)) (INV_REC_f__2 A B C))))
(assert (forall ((A Int) (B Int) (C Int))(=> (and (and (= (* (- 1) B) 0) (not (>= (+ (- (+ C (- 1)) A) (- 1)) 0))) (INV_42__2_PRE A C)) (INV_REC_f__2_PRE A B))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (and (and (and (= (* (- 1) D) 0) (INV_REC_f__2 A D C)) (not (>= (+ (- (+ B (- 1)) A) (- 1)) 0))) (INV_42__2_PRE A B)) (INV_42__2 A B C))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))(=> (and (and (and (= (+ A 1) D) (INV_42__2 D B C)) (>= (+ (- (+ B (- 1)) A) (- 1)) 0)) (INV_42__2_PRE A B)) (INV_42__2 A B C))))
(check-sat)
