(set-info :origin "Horn problem converted to SMT-LIB2 using Eldarica (https://github.com/uuverifiers/eldarica)")
(set-logic HORN)
(declare-fun INV_MAIN_23 (Int Int Int Int Int Int) Bool)
(declare-fun INV_MAIN_42 (Int Int Int Int Int Int) Bool)
(assert (forall ((A Int) (B Int) (C Int) (D Int)) (not (and (and (and (>= (+ A (- 1)) 0) (not (>= (+ B (- 1)) 0))) (= C D)) (= B A)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int)) (not (and (and (and (not (>= (+ A (- 1)) 0)) (>= (+ B (- 1)) 0)) (= C D)) (= B A)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int)) (not (and (and (and (and (not (= A B)) (not (>= (+ C (- 1)) 0))) (not (>= (+ D (- 1)) 0))) (= A B)) (= D C)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))(=> (and (and (and (and (and (= (* (- 1) B) 0) (= (* (- 1) E) 0)) (>= (+ F (- 1)) 0)) (>= (+ C (- 1)) 0)) (= A D)) (= C F)) (INV_MAIN_23 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) (not (and (and (and (>= (+ (- (+ A 1) B) (- 1)) 0) (not (>= (+ (- C (+ D 1)) (- 1)) 0))) (not (>= (+ (- (+ D 1) C) (- 1)) 0))) (INV_MAIN_23 E D C F A B)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) (not (and (and (and (not (>= (+ (- A (+ B 1)) (- 1)) 0)) (not (>= (+ (- (+ B 1) A) (- 1)) 0))) (>= (+ (- (+ C 1) D) (- 1)) 0)) (INV_MAIN_23 E C D F B A)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) (not (and (and (and (and (and (not (= (+ (+ A (- 2)) 1) (+ B (- 1)))) (not (>= (+ (- C (+ D 1)) (- 1)) 0))) (not (>= (+ (- (+ D 1) C) (- 1)) 0))) (not (>= (+ (- E (+ F 1)) (- 1)) 0))) (not (>= (+ (- (+ F 1) E) (- 1)) 0))) (INV_MAIN_23 A F E B D C)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int))(=> (and (and (and (and (and (and (and (and (= (+ (+ G (- 2)) 1) A) (= (+ H 1) B)) (= (+ I (- 1)) D)) (= (+ J 1) E)) (>= (+ (- F (+ J 1)) (- 1)) 0)) (not (>= (+ (- (+ J 1) F) (- 1)) 0))) (>= (+ (- C (+ H 1)) (- 1)) 0)) (not (>= (+ (- (+ H 1) C) (- 1)) 0))) (INV_MAIN_23 G H C I J F)) (INV_MAIN_23 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int))(=> (and (and (and (and (and (= (+ (+ G (- 2)) 1) A) (= (+ H 1) B)) (not (and (not (>= (+ (- (+ E 1) F) (- 1)) 0)) (>= (+ (- F (+ E 1)) (- 1)) 0)))) (>= (+ (- C (+ H 1)) (- 1)) 0)) (not (>= (+ (- (+ H 1) C) (- 1)) 0))) (INV_MAIN_23 G H C D E F)) (INV_MAIN_23 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int))(=> (and (and (and (and (and (= (+ G (- 1)) D) (= (+ H 1) E)) (not (and (not (>= (+ (- (+ B 1) C) (- 1)) 0)) (>= (+ (- C (+ B 1)) (- 1)) 0)))) (>= (+ (- F (+ H 1)) (- 1)) 0)) (not (>= (+ (- (+ H 1) F) (- 1)) 0))) (INV_MAIN_23 A B C G H F)) (INV_MAIN_23 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int))(=> (and (and (and (and (and (and (= (+ G 1) A) (= (+ (+ H (- 2)) 1) B)) (= (+ I 1) D)) (= (+ J (- 1)) E)) (>= (+ (- (+ I 1) F) (- 1)) 0)) (>= (+ (- (+ G 1) C) (- 1)) 0)) (INV_MAIN_23 H G C J I F)) (INV_MAIN_42 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) (not (and (and (and (and (>= (+ (- (+ A 1) B) (- 1)) 0) (not (>= (+ (- B (+ A 1)) (- 1)) 0))) (not (>= (+ (- (+ (+ C 2) (- 1)) D) (- 1)) 0))) (not (>= (+ (- D (+ (+ C 2) (- 1))) (- 1)) 0))) (INV_MAIN_42 D E C B F A)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) (not (and (and (and (and (not (>= (+ (- (+ A 1) B) (- 1)) 0)) (not (>= (+ (- B (+ A 1)) (- 1)) 0))) (>= (+ (- (+ (+ C 2) (- 1)) D) (- 1)) 0)) (not (>= (+ (- D (+ (+ C 2) (- 1))) (- 1)) 0))) (INV_MAIN_42 D E C B F A)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) (not (and (and (and (and (and (not (= (+ A 1) (+ B 1))) (not (>= (+ (- (+ C 1) D) (- 1)) 0))) (not (>= (+ (- D (+ C 1)) (- 1)) 0))) (not (>= (+ (- (+ (+ E 2) (- 1)) F) (- 1)) 0))) (not (>= (+ (- F (+ (+ E 2) (- 1))) (- 1)) 0))) (INV_MAIN_42 F A E D B C)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int))(=> (and (and (and (and (and (and (and (and (= (+ G 1) A) (= (+ (+ H 2) (- 1)) C)) (= (+ I 1) D)) (= (+ J 1) F)) (>= (+ (- (+ J 1) E) (- 1)) 0)) (not (>= (+ (- E (+ J 1)) (- 1)) 0))) (>= (+ (- (+ (+ H 2) (- 1)) B) (- 1)) 0)) (not (>= (+ (- B (+ (+ H 2) (- 1))) (- 1)) 0))) (INV_MAIN_42 B G H E I J)) (INV_MAIN_23 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int))(=> (and (and (and (and (and (and (= (+ G 1) B) (= (+ (+ H 2) (- 1)) C)) (= (+ I 1) E)) (= (+ J 1) F)) (>= (+ (- D (+ J 1)) (- 1)) 0)) (>= (+ (- A (+ (+ H 2) (- 1))) (- 1)) 0)) (INV_MAIN_42 A G H D I J)) (INV_MAIN_42 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int))(=> (and (and (and (and (= (+ G 1) B) (= (+ (+ H 2) (- 1)) C)) (not (>= (+ (- D (+ F 1)) (- 1)) 0))) (>= (+ (- A (+ (+ H 2) (- 1))) (- 1)) 0)) (INV_MAIN_42 A G H D E F)) (INV_MAIN_42 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int))(=> (and (and (and (and (= (+ G 1) E) (= (+ H 1) F)) (not (>= (+ (- A (+ (+ C 2) (- 1))) (- 1)) 0))) (>= (+ (- D (+ H 1)) (- 1)) 0)) (INV_MAIN_42 A B C D G H)) (INV_MAIN_42 A B C D E F))))
(check-sat)
