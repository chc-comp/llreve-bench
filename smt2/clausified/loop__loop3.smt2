(set-info :origin "Horn problem converted to SMT-LIB2 using Eldarica (https://github.com/uuverifiers/eldarica)")
(set-logic HORN)
(declare-fun INV_MAIN_42 (Int Int Int Int Int Int) Bool)
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int))(=> (and (and (and (and (and (and (and (= (* (- 1) B) (- 1)) (= (* (- 1) C) 0)) (= (* (- 1) D) (- 1))) (= (* (- 1) E) (- 1))) (= (* (- 1) F) (- 2))) (>= (+ (- 1 G) (- 1)) 0)) (not (>= (+ (- 1 A) (- 1)) 0))) (= A G)) (INV_MAIN_42 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))(=> (and (and (and (and (and (and (= (* (- 1) B) (- 1)) (= (* (- 1) C) 0)) (= (* (- 1) E) (- 1))) (= (* (- 1) F) (- 2))) (not (>= (+ (- 1 D) (- 1)) 0))) (not (>= (+ (- 1 A) (- 1)) 0))) (= A D)) (INV_MAIN_42 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int))(=> (and (and (and (and (and (and (and (and (= (* (- 1) A) (- 1)) (= (* (- 1) B) (- 1))) (= (* (- 1) C) 0)) (= (* (- 1) D) (- 1))) (= (* (- 1) E) (- 1))) (= (* (- 1) F) (- 2))) (>= (+ (- 1 G) (- 1)) 0)) (>= (+ (- 1 H) (- 1)) 0)) (= H G)) (INV_MAIN_42 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int))(=> (and (and (and (and (and (and (and (= (* (- 1) A) (- 1)) (= (* (- 1) B) (- 1))) (= (* (- 1) C) 0)) (= (* (- 1) E) (- 1))) (= (* (- 1) F) (- 2))) (not (>= (+ (- 1 D) (- 1)) 0))) (>= (+ (- 1 G) (- 1)) 0)) (= G D)) (INV_MAIN_42 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) (not (and (and (and (not (= A B)) (not (>= (+ (- C D) (- 1)) 0))) (not (>= E F))) (INV_MAIN_42 E F A C D B)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int))(=> (and (and (and (and (and (and (= (+ G 1) B) (= (+ H 2) C)) (= (+ I 1) E)) (= (+ J 2) F)) (>= (+ (- D I) (- 1)) 0)) (>= A G)) (INV_MAIN_42 A G H D I J)) (INV_MAIN_42 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int))(=> (and (and (and (and (= (+ G 1) B) (= (+ H 2) C)) (not (>= (+ (- D E) (- 1)) 0))) (>= A G)) (INV_MAIN_42 A G H D E F)) (INV_MAIN_42 A B C D E F))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int))(=> (and (and (and (and (= (+ G 1) E) (= (+ H 2) F)) (not (>= A B))) (>= (+ (- D G) (- 1)) 0)) (INV_MAIN_42 A B C D G H)) (INV_MAIN_42 A B C D E F))))
(check-sat)
