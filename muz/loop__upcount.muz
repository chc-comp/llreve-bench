;; Produced by llreve (commit dc2abeaa50d9197d51fa4223b58154246b164df0)
;; See https://formal.iti.kit.edu/reve and https://github.com/mattulbrich/llreve/
;; (c) 2018 KIT

(set-option
   :int-real-coercions
   false)
(declare-var
   m.0$1_0_old_1
   Int)
(declare-var
   m.0$2_0_old_1
   Int)
(declare-var
   n$1_0_old_1
   Int)
(declare-var
   n$2_0_old_1
   Int)
(declare-var
   n.addr.0$1_0_old_1
   Int)
(declare-var
   n.addr.0$2_0_old_1
   Int)
(declare-rel
   END_QUERY
   ())
(define-fun
   IN_INV
   ((n$1_0 Int)
    (n$2_0 Int))
   Bool
   (and
      (= n$1_0 n$2_0)
      (>= n$1_0 0)
      (>= n$2_0 0)))
(define-fun
   OUT_INV
   ((result$1 Int)
    (result$2 Int))
   Bool
   (= result$1 result$2))
; :annot (INV_MAIN_42 m.0$1_0 n.addr.0$1_0 m.0$2_0 n.addr.0$2_0)
(declare-rel
   INV_MAIN_42
   (Int
    Int
    Int
    Int))
(rule
   (let
      ((n$1_0_1 n$1_0_old_1))
      (let
         ((m.0$1_0_1 0)
          (n.addr.0$1_0_1 n$1_0_1)
          (n$2_0_1 n$2_0_old_1))
         (let
            ((m.0$2_0_1 0)
             (n.addr.0$2_0_1 n$2_0_1))
            (=>
               (IN_INV n$1_0_old_1 n$2_0_old_1)
               (INV_MAIN_42 m.0$1_0_1 n.addr.0$1_0_1 m.0$2_0_1 n.addr.0$2_0_1))))))
(rule
   (let
      ((m.0$1_0_1 m.0$1_0_old_1)
       (n.addr.0$1_0_1 n.addr.0$1_0_old_1))
      (let
         ((cmp$1_0_1 (>= n.addr.0$1_0_1 0)))
         (let
            ((result$1_1 m.0$1_0_1)
             (m.0$2_0_1 m.0$2_0_old_1)
             (n.addr.0$2_0_1 n.addr.0$2_0_old_1))
            (let
               ((cmp$2_0_1 (> n.addr.0$2_0_1 0))
                (inc$2_0_1 (+ m.0$2_0_1 1)))
               (let
                  ((result$2_1 inc$2_0_1))
                  (=>
                     (and
                        (INV_MAIN_42 m.0$1_0_old_1 n.addr.0$1_0_old_1 m.0$2_0_old_1 n.addr.0$2_0_old_1)
                        (not cmp$1_0_1)
                        (not cmp$2_0_1)
                        (not (OUT_INV result$1_1 result$2_1)))
                     END_QUERY)))))))
(rule
   (let
      ((m.0$1_0_1 m.0$1_0_old_1)
       (n.addr.0$1_0_1 n.addr.0$1_0_old_1))
      (let
         ((cmp$1_0_1 (>= n.addr.0$1_0_1 0)))
         (let
            ((inc$1_0_1 (+ m.0$1_0_1 1))
             (dec$1_0_1 (+ n.addr.0$1_0_1 (- 1))))
            (let
               ((m.0$1_0_2 inc$1_0_1)
                (n.addr.0$1_0_2 dec$1_0_1)
                (m.0$2_0_1 m.0$2_0_old_1)
                (n.addr.0$2_0_1 n.addr.0$2_0_old_1))
               (let
                  ((cmp$2_0_1 (> n.addr.0$2_0_1 0))
                   (inc$2_0_1 (+ m.0$2_0_1 1)))
                  (let
                     ((dec$2_0_1 (+ n.addr.0$2_0_1 (- 1))))
                     (let
                        ((m.0$2_0_2 inc$2_0_1)
                         (n.addr.0$2_0_2 dec$2_0_1))
                        (=>
                           (and
                              (INV_MAIN_42 m.0$1_0_old_1 n.addr.0$1_0_old_1 m.0$2_0_old_1 n.addr.0$2_0_old_1)
                              cmp$1_0_1
                              cmp$2_0_1)
                           (INV_MAIN_42 m.0$1_0_2 n.addr.0$1_0_2 m.0$2_0_2 n.addr.0$2_0_2))))))))))
(rule
   (let
      ((m.0$1_0_1 m.0$1_0_old_1)
       (n.addr.0$1_0_1 n.addr.0$1_0_old_1))
      (let
         ((cmp$1_0_1 (>= n.addr.0$1_0_1 0)))
         (let
            ((inc$1_0_1 (+ m.0$1_0_1 1))
             (dec$1_0_1 (+ n.addr.0$1_0_1 (- 1))))
            (let
               ((m.0$1_0_2 inc$1_0_1)
                (n.addr.0$1_0_2 dec$1_0_1))
               (=>
                  (and
                     (INV_MAIN_42 m.0$1_0_old_1 n.addr.0$1_0_old_1 m.0$2_0_old_1 n.addr.0$2_0_old_1)
                     cmp$1_0_1
                     (let
                        ((m.0$2_0_1 m.0$2_0_old_1)
                         (n.addr.0$2_0_1 n.addr.0$2_0_old_1))
                        (let
                           ((cmp$2_0_1 (> n.addr.0$2_0_1 0))
                            (inc$2_0_1 (+ m.0$2_0_1 1)))
                           (=>
                              cmp$2_0_1
                              (let
                                 ((dec$2_0_1 (+ n.addr.0$2_0_1 (- 1))))
                                 (let
                                    ((m.0$2_0_2 inc$2_0_1)
                                     (n.addr.0$2_0_2 dec$2_0_1))
                                    false))))))
                  (INV_MAIN_42 m.0$1_0_2 n.addr.0$1_0_2 m.0$2_0_old_1 n.addr.0$2_0_old_1)))))))
(rule
   (let
      ((m.0$2_0_1 m.0$2_0_old_1)
       (n.addr.0$2_0_1 n.addr.0$2_0_old_1))
      (let
         ((cmp$2_0_1 (> n.addr.0$2_0_1 0))
          (inc$2_0_1 (+ m.0$2_0_1 1)))
         (let
            ((dec$2_0_1 (+ n.addr.0$2_0_1 (- 1))))
            (let
               ((m.0$2_0_2 inc$2_0_1)
                (n.addr.0$2_0_2 dec$2_0_1))
               (=>
                  (and
                     (INV_MAIN_42 m.0$1_0_old_1 n.addr.0$1_0_old_1 m.0$2_0_old_1 n.addr.0$2_0_old_1)
                     cmp$2_0_1
                     (let
                        ((m.0$1_0_1 m.0$1_0_old_1)
                         (n.addr.0$1_0_1 n.addr.0$1_0_old_1))
                        (let
                           ((cmp$1_0_1 (>= n.addr.0$1_0_1 0)))
                           (=>
                              cmp$1_0_1
                              (let
                                 ((inc$1_0_1 (+ m.0$1_0_1 1))
                                  (dec$1_0_1 (+ n.addr.0$1_0_1 (- 1))))
                                 (let
                                    ((m.0$1_0_2 inc$1_0_1)
                                     (n.addr.0$1_0_2 dec$1_0_1))
                                    false))))))
                  (INV_MAIN_42 m.0$1_0_old_1 n.addr.0$1_0_old_1 m.0$2_0_2 n.addr.0$2_0_2)))))))
(query
   END_QUERY
   :print-certificate
   true)
