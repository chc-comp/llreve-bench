;; Produced by llreve (commit dc2abeaa50d9197d51fa4223b58154246b164df0)
;; See https://formal.iti.kit.edu/reve and https://github.com/mattulbrich/llreve/
;; (c) 2018 KIT

(set-option
   :int-real-coercions
   false)
(declare-var
   x.0$1_0_old_1
   Int)
(declare-var
   x.0$2_0_old_1
   Int)
(declare-var
   z$1_0_old_1
   Int)
(declare-var
   z$2_0_old_1
   Int)
(declare-rel
   END_QUERY
   ())
(define-fun
   IN_INV
   ((z$1_0 Int)
    (z$2_0 Int))
   Bool
   (= z$1_0 z$2_0))
(define-fun
   OUT_INV
   ((result$1 Int)
    (result$2 Int))
   Bool
   (= result$1 result$2))
; :annot (INV_MAIN_42 x.0$1_0 x.0$2_0)
(declare-rel
   INV_MAIN_42
   (Int
    Int))
(rule
   (let
      ((z$1_0_1 z$1_0_old_1)
       (x.0$1_0_1 1))
      (let
         ((cmp$1_0_1 (<= x.0$1_0_1 9)))
         (let
            ((mul1$1_0_1 (* 2 x.0$1_0_1)))
            (let
               ((result$1_1 mul1$1_0_1)
                (z$2_0_1 z$2_0_old_1)
                (x.0$2_0_1 1))
               (let
                  ((cmp$2_0_1 (< x.0$2_0_1 10)))
                  (=>
                     (and
                        (IN_INV z$1_0_old_1 z$2_0_old_1)
                        (not cmp$1_0_1)
                        cmp$2_0_1)
                     END_QUERY)))))))
(rule
   (let
      ((z$1_0_1 z$1_0_old_1)
       (x.0$1_0_1 1))
      (let
         ((cmp$1_0_1 (<= x.0$1_0_1 9)))
         (let
            ((z$2_0_1 z$2_0_old_1)
             (x.0$2_0_1 1))
            (let
               ((cmp$2_0_1 (< x.0$2_0_1 10)))
               (=>
                  (and
                     (IN_INV z$1_0_old_1 z$2_0_old_1)
                     cmp$1_0_1
                     (not cmp$2_0_1))
                  END_QUERY))))))
(rule
   (let
      ((z$1_0_1 z$1_0_old_1)
       (x.0$1_0_1 1))
      (let
         ((cmp$1_0_1 (<= x.0$1_0_1 9)))
         (let
            ((mul1$1_0_1 (* 2 x.0$1_0_1)))
            (let
               ((result$1_1 mul1$1_0_1)
                (z$2_0_1 z$2_0_old_1)
                (x.0$2_0_1 1))
               (let
                  ((cmp$2_0_1 (< x.0$2_0_1 10)))
                  (let
                     ((mul$2_0_1 (* x.0$2_0_1 2)))
                     (let
                        ((result$2_1 mul$2_0_1))
                        (=>
                           (and
                              (IN_INV z$1_0_old_1 z$2_0_old_1)
                              (not cmp$1_0_1)
                              (not cmp$2_0_1)
                              (not (OUT_INV result$1_1 result$2_1)))
                           END_QUERY)))))))))
(rule
   (let
      ((z$1_0_1 z$1_0_old_1)
       (x.0$1_0_1 1))
      (let
         ((cmp$1_0_1 (<= x.0$1_0_1 9)))
         (let
            ((z$2_0_1 z$2_0_old_1)
             (x.0$2_0_1 1))
            (let
               ((cmp$2_0_1 (< x.0$2_0_1 10)))
               (=>
                  (and
                     (IN_INV z$1_0_old_1 z$2_0_old_1)
                     cmp$1_0_1
                     cmp$2_0_1)
                  (INV_MAIN_42 x.0$1_0_1 x.0$2_0_1)))))))
(rule
   (let
      ((x.0$1_0_1 x.0$1_0_old_1))
      (let
         ((add$1_0_1 (+ x.0$1_0_1 2)))
         (let
            ((mul$1_0_1 (* 2 add$1_0_1)))
            (let
               ((x.0$1_0_2 mul$1_0_1))
               (let
                  ((cmp$1_0_1 (<= x.0$1_0_2 9)))
                  (let
                     ((mul1$1_0_1 (* 2 x.0$1_0_2)))
                     (let
                        ((result$1_1 mul1$1_0_1)
                         (x.0$2_0_1 x.0$2_0_old_1))
                        (let
                           ((add$2_0_1 (+ 2 x.0$2_0_1)))
                           (let
                              ((add1$2_0_1 (+ add$2_0_1 add$2_0_1)))
                              (let
                                 ((x.0$2_0_2 add1$2_0_1))
                                 (let
                                    ((cmp$2_0_1 (< x.0$2_0_2 10)))
                                    (let
                                       ((mul$2_0_1 (* x.0$2_0_2 2)))
                                       (let
                                          ((result$2_1 mul$2_0_1))
                                          (=>
                                             (and
                                                (INV_MAIN_42 x.0$1_0_old_1 x.0$2_0_old_1)
                                                (not cmp$1_0_1)
                                                (not cmp$2_0_1)
                                                (not (OUT_INV result$1_1 result$2_1)))
                                             END_QUERY)))))))))))))))
(rule
   (let
      ((x.0$1_0_1 x.0$1_0_old_1))
      (let
         ((add$1_0_1 (+ x.0$1_0_1 2)))
         (let
            ((mul$1_0_1 (* 2 add$1_0_1)))
            (let
               ((x.0$1_0_2 mul$1_0_1))
               (let
                  ((cmp$1_0_1 (<= x.0$1_0_2 9)))
                  (let
                     ((x.0$2_0_1 x.0$2_0_old_1))
                     (let
                        ((add$2_0_1 (+ 2 x.0$2_0_1)))
                        (let
                           ((add1$2_0_1 (+ add$2_0_1 add$2_0_1)))
                           (let
                              ((x.0$2_0_2 add1$2_0_1))
                              (let
                                 ((cmp$2_0_1 (< x.0$2_0_2 10)))
                                 (=>
                                    (and
                                       (INV_MAIN_42 x.0$1_0_old_1 x.0$2_0_old_1)
                                       cmp$1_0_1
                                       cmp$2_0_1)
                                    (INV_MAIN_42 x.0$1_0_2 x.0$2_0_2)))))))))))))
(rule
   (let
      ((x.0$1_0_1 x.0$1_0_old_1))
      (let
         ((add$1_0_1 (+ x.0$1_0_1 2)))
         (let
            ((mul$1_0_1 (* 2 add$1_0_1)))
            (let
               ((x.0$1_0_2 mul$1_0_1))
               (let
                  ((cmp$1_0_1 (<= x.0$1_0_2 9)))
                  (=>
                     (and
                        (INV_MAIN_42 x.0$1_0_old_1 x.0$2_0_old_1)
                        cmp$1_0_1
                        (let
                           ((x.0$2_0_1 x.0$2_0_old_1))
                           (let
                              ((add$2_0_1 (+ 2 x.0$2_0_1)))
                              (let
                                 ((add1$2_0_1 (+ add$2_0_1 add$2_0_1)))
                                 (let
                                    ((x.0$2_0_2 add1$2_0_1))
                                    (let
                                       ((cmp$2_0_1 (< x.0$2_0_2 10)))
                                       (not cmp$2_0_1)))))))
                     (INV_MAIN_42 x.0$1_0_2 x.0$2_0_old_1))))))))
(rule
   (let
      ((x.0$2_0_1 x.0$2_0_old_1))
      (let
         ((add$2_0_1 (+ 2 x.0$2_0_1)))
         (let
            ((add1$2_0_1 (+ add$2_0_1 add$2_0_1)))
            (let
               ((x.0$2_0_2 add1$2_0_1))
               (let
                  ((cmp$2_0_1 (< x.0$2_0_2 10)))
                  (=>
                     (and
                        (INV_MAIN_42 x.0$1_0_old_1 x.0$2_0_old_1)
                        cmp$2_0_1
                        (let
                           ((x.0$1_0_1 x.0$1_0_old_1))
                           (let
                              ((add$1_0_1 (+ x.0$1_0_1 2)))
                              (let
                                 ((mul$1_0_1 (* 2 add$1_0_1)))
                                 (let
                                    ((x.0$1_0_2 mul$1_0_1))
                                    (let
                                       ((cmp$1_0_1 (<= x.0$1_0_2 9)))
                                       (not cmp$1_0_1)))))))
                     (INV_MAIN_42 x.0$1_0_old_1 x.0$2_0_2))))))))
(query
   END_QUERY
   :print-certificate
   true)
