;; Produced by llreve (commit dc2abeaa50d9197d51fa4223b58154246b164df0)
;; See https://formal.iti.kit.edu/reve and https://github.com/mattulbrich/llreve/
;; (c) 2018 KIT

(set-option
   :int-real-coercions
   false)
(declare-var
   call$1_0_1
   Int)
(declare-var
   call$2_0_1
   Int)
(declare-var
   x$1_0_old_1
   Int)
(declare-var
   x$2_0_old_1
   Int)
(declare-rel
   END_QUERY
   ())
(define-fun
   IN_INV
   ((x$1_0 Int)
    (x$2_0 Int))
   Bool
   (= x$1_0 x$2_0))
(define-fun
   OUT_INV
   ((result$1 Int)
    (result$2 Int))
   Bool
   (= result$1 result$2))
(declare-rel
   INV_REC_f^f
   (Int
    Int
    Int
    Int))
(declare-rel
   INV_REC_f^f_PRE
   (Int
    Int))
(declare-rel
   INV_REC_f__1
   (Int
    Int))
(declare-rel
   INV_REC_f__1_PRE
   (Int))
(declare-rel
   INV_REC_f__2
   (Int
    Int))
(declare-rel
   INV_REC_f__2_PRE
   (Int))
(rule
   (let
      ((x$1_0_1 x$1_0_old_1))
      (let
         ((cmp$1_0_1 (> x$1_0_1 0)))
         (let
            ((sub$1_0_1 (- x$1_0_1 1))
             (x$2_0_1 x$2_0_old_1))
            (let
               ((cmp$2_0_1 (> x$2_0_1 1)))
               (let
                  ((sub$2_0_1 (- x$2_0_1 2)))
                  (=>
                     (and
                        (IN_INV x$1_0_old_1 x$2_0_old_1)
                        cmp$1_0_1
                        cmp$2_0_1)
                     (INV_REC_f^f_PRE sub$1_0_1 sub$2_0_1))))))))
(rule
   (let
      ((x$1_0_1 x$1_0_old_1))
      (let
         ((cmp$1_0_1 (> x$1_0_1 0)))
         (let
            ((sub$1_0_1 (- x$1_0_1 1))
             (x$2_0_1 x$2_0_old_1))
            (let
               ((cmp$2_0_1 (> x$2_0_1 1)))
               (let
                  ((sub$2_0_1 (- x$2_0_1 2)))
                  (let
                     ((add$1_0_1 (+ call$1_0_1 1)))
                     (let
                        ((x.addr.0$1_0_1 add$1_0_1))
                        (let
                           ((cmp1$1_0_1 (< x.addr.0$1_0_1 0)))
                           (let
                              ((.x.addr.0$1_0_1 (ite cmp1$1_0_1 0 x.addr.0$1_0_1)))
                              (let
                                 ((result$1_1 .x.addr.0$1_0_1)
                                  (add$2_0_1 (+ call$2_0_1 2)))
                                 (let
                                    ((x.addr.0$2_0_1 add$2_0_1))
                                    (let
                                       ((cmp1$2_0_1 (< x.addr.0$2_0_1 0)))
                                       (let
                                          ((.x.addr.0$2_0_1 (ite cmp1$2_0_1 0 x.addr.0$2_0_1)))
                                          (let
                                             ((result$2_1 .x.addr.0$2_0_1))
                                             (=>
                                                (and
                                                   (IN_INV x$1_0_old_1 x$2_0_old_1)
                                                   cmp$1_0_1
                                                   cmp$2_0_1
                                                   (INV_REC_f^f sub$1_0_1 sub$2_0_1 call$1_0_1 call$2_0_1)
                                                   (not (OUT_INV result$1_1 result$2_1)))
                                                END_QUERY))))))))))))))))
(rule
   (let
      ((x$1_0_1 x$1_0_old_1))
      (let
         ((cmp$1_0_1 (> x$1_0_1 0)))
         (let
            ((sub$1_0_1 (- x$1_0_1 1))
             (x$2_0_1 x$2_0_old_1))
            (let
               ((cmp$2_0_1 (> x$2_0_1 1)))
               (let
                  ((x.addr.0$2_0_1 x$2_0_1))
                  (let
                     ((cmp1$2_0_1 (< x.addr.0$2_0_1 0)))
                     (let
                        ((.x.addr.0$2_0_1 (ite cmp1$2_0_1 0 x.addr.0$2_0_1)))
                        (let
                           ((result$2_1 .x.addr.0$2_0_1))
                           (=>
                              (and
                                 (IN_INV x$1_0_old_1 x$2_0_old_1)
                                 cmp$1_0_1
                                 (not cmp$2_0_1))
                              (INV_REC_f__1_PRE sub$1_0_1)))))))))))
(rule
   (let
      ((x$1_0_1 x$1_0_old_1))
      (let
         ((cmp$1_0_1 (> x$1_0_1 0)))
         (let
            ((sub$1_0_1 (- x$1_0_1 1))
             (x$2_0_1 x$2_0_old_1))
            (let
               ((cmp$2_0_1 (> x$2_0_1 1)))
               (let
                  ((x.addr.0$2_0_1 x$2_0_1))
                  (let
                     ((cmp1$2_0_1 (< x.addr.0$2_0_1 0)))
                     (let
                        ((.x.addr.0$2_0_1 (ite cmp1$2_0_1 0 x.addr.0$2_0_1)))
                        (let
                           ((result$2_1 .x.addr.0$2_0_1))
                           (let
                              ((add$1_0_1 (+ call$1_0_1 1)))
                              (let
                                 ((x.addr.0$1_0_1 add$1_0_1))
                                 (let
                                    ((cmp1$1_0_1 (< x.addr.0$1_0_1 0)))
                                    (let
                                       ((.x.addr.0$1_0_1 (ite cmp1$1_0_1 0 x.addr.0$1_0_1)))
                                       (let
                                          ((result$1_1 .x.addr.0$1_0_1))
                                          (=>
                                             (and
                                                (IN_INV x$1_0_old_1 x$2_0_old_1)
                                                cmp$1_0_1
                                                (not cmp$2_0_1)
                                                (INV_REC_f__1 sub$1_0_1 call$1_0_1)
                                                (not (OUT_INV result$1_1 result$2_1)))
                                             END_QUERY)))))))))))))))
(rule
   (let
      ((x$1_0_1 x$1_0_old_1))
      (let
         ((cmp$1_0_1 (> x$1_0_1 0)))
         (let
            ((x.addr.0$1_0_1 x$1_0_1))
            (let
               ((cmp1$1_0_1 (< x.addr.0$1_0_1 0)))
               (let
                  ((.x.addr.0$1_0_1 (ite cmp1$1_0_1 0 x.addr.0$1_0_1)))
                  (let
                     ((result$1_1 .x.addr.0$1_0_1)
                      (x$2_0_1 x$2_0_old_1))
                     (let
                        ((cmp$2_0_1 (> x$2_0_1 1)))
                        (let
                           ((sub$2_0_1 (- x$2_0_1 2)))
                           (=>
                              (and
                                 (IN_INV x$1_0_old_1 x$2_0_old_1)
                                 (not cmp$1_0_1)
                                 cmp$2_0_1)
                              (INV_REC_f__2_PRE sub$2_0_1)))))))))))
(rule
   (let
      ((x$1_0_1 x$1_0_old_1))
      (let
         ((cmp$1_0_1 (> x$1_0_1 0)))
         (let
            ((x.addr.0$1_0_1 x$1_0_1))
            (let
               ((cmp1$1_0_1 (< x.addr.0$1_0_1 0)))
               (let
                  ((.x.addr.0$1_0_1 (ite cmp1$1_0_1 0 x.addr.0$1_0_1)))
                  (let
                     ((result$1_1 .x.addr.0$1_0_1)
                      (x$2_0_1 x$2_0_old_1))
                     (let
                        ((cmp$2_0_1 (> x$2_0_1 1)))
                        (let
                           ((sub$2_0_1 (- x$2_0_1 2)))
                           (let
                              ((add$2_0_1 (+ call$2_0_1 2)))
                              (let
                                 ((x.addr.0$2_0_1 add$2_0_1))
                                 (let
                                    ((cmp1$2_0_1 (< x.addr.0$2_0_1 0)))
                                    (let
                                       ((.x.addr.0$2_0_1 (ite cmp1$2_0_1 0 x.addr.0$2_0_1)))
                                       (let
                                          ((result$2_1 .x.addr.0$2_0_1))
                                          (=>
                                             (and
                                                (IN_INV x$1_0_old_1 x$2_0_old_1)
                                                (not cmp$1_0_1)
                                                cmp$2_0_1
                                                (INV_REC_f__2 sub$2_0_1 call$2_0_1)
                                                (not (OUT_INV result$1_1 result$2_1)))
                                             END_QUERY)))))))))))))))
(rule
   (let
      ((x$1_0_1 x$1_0_old_1))
      (let
         ((cmp$1_0_1 (> x$1_0_1 0)))
         (let
            ((x.addr.0$1_0_1 x$1_0_1))
            (let
               ((cmp1$1_0_1 (< x.addr.0$1_0_1 0)))
               (let
                  ((.x.addr.0$1_0_1 (ite cmp1$1_0_1 0 x.addr.0$1_0_1)))
                  (let
                     ((result$1_1 .x.addr.0$1_0_1)
                      (x$2_0_1 x$2_0_old_1))
                     (let
                        ((cmp$2_0_1 (> x$2_0_1 1)))
                        (let
                           ((x.addr.0$2_0_1 x$2_0_1))
                           (let
                              ((cmp1$2_0_1 (< x.addr.0$2_0_1 0)))
                              (let
                                 ((.x.addr.0$2_0_1 (ite cmp1$2_0_1 0 x.addr.0$2_0_1)))
                                 (let
                                    ((result$2_1 .x.addr.0$2_0_1))
                                    (=>
                                       (and
                                          (IN_INV x$1_0_old_1 x$2_0_old_1)
                                          (not cmp$1_0_1)
                                          (not cmp$2_0_1)
                                          (not (OUT_INV result$1_1 result$2_1)))
                                       END_QUERY)))))))))))))
(rule
   (let
      ((x$1_0_1 x$1_0_old_1))
      (let
         ((cmp$1_0_1 (> x$1_0_1 0)))
         (let
            ((sub$1_0_1 (- x$1_0_1 1))
             (x$2_0_1 x$2_0_old_1))
            (let
               ((cmp$2_0_1 (> x$2_0_1 1)))
               (let
                  ((sub$2_0_1 (- x$2_0_1 2)))
                  (=>
                     (and
                        (INV_REC_f^f_PRE x$1_0_old_1 x$2_0_old_1)
                        cmp$1_0_1
                        cmp$2_0_1)
                     (INV_REC_f^f_PRE sub$1_0_1 sub$2_0_1))))))))
(rule
   (let
      ((x$1_0_1 x$1_0_old_1))
      (let
         ((cmp$1_0_1 (> x$1_0_1 0)))
         (let
            ((sub$1_0_1 (- x$1_0_1 1))
             (x$2_0_1 x$2_0_old_1))
            (let
               ((cmp$2_0_1 (> x$2_0_1 1)))
               (let
                  ((sub$2_0_1 (- x$2_0_1 2)))
                  (let
                     ((add$1_0_1 (+ call$1_0_1 1)))
                     (let
                        ((x.addr.0$1_0_1 add$1_0_1))
                        (let
                           ((cmp1$1_0_1 (< x.addr.0$1_0_1 0)))
                           (let
                              ((.x.addr.0$1_0_1 (ite cmp1$1_0_1 0 x.addr.0$1_0_1)))
                              (let
                                 ((result$1_1 .x.addr.0$1_0_1)
                                  (add$2_0_1 (+ call$2_0_1 2)))
                                 (let
                                    ((x.addr.0$2_0_1 add$2_0_1))
                                    (let
                                       ((cmp1$2_0_1 (< x.addr.0$2_0_1 0)))
                                       (let
                                          ((.x.addr.0$2_0_1 (ite cmp1$2_0_1 0 x.addr.0$2_0_1)))
                                          (let
                                             ((result$2_1 .x.addr.0$2_0_1))
                                             (=>
                                                (and
                                                   (INV_REC_f^f_PRE x$1_0_old_1 x$2_0_old_1)
                                                   cmp$1_0_1
                                                   cmp$2_0_1
                                                   (INV_REC_f^f sub$1_0_1 sub$2_0_1 call$1_0_1 call$2_0_1))
                                                (INV_REC_f^f x$1_0_old_1 x$2_0_old_1 result$1_1 result$2_1)))))))))))))))))
(rule
   (let
      ((x$1_0_1 x$1_0_old_1))
      (let
         ((cmp$1_0_1 (> x$1_0_1 0)))
         (let
            ((sub$1_0_1 (- x$1_0_1 1))
             (x$2_0_1 x$2_0_old_1))
            (let
               ((cmp$2_0_1 (> x$2_0_1 1)))
               (let
                  ((x.addr.0$2_0_1 x$2_0_1))
                  (let
                     ((cmp1$2_0_1 (< x.addr.0$2_0_1 0)))
                     (let
                        ((.x.addr.0$2_0_1 (ite cmp1$2_0_1 0 x.addr.0$2_0_1)))
                        (let
                           ((result$2_1 .x.addr.0$2_0_1))
                           (=>
                              (and
                                 (INV_REC_f^f_PRE x$1_0_old_1 x$2_0_old_1)
                                 cmp$1_0_1
                                 (not cmp$2_0_1))
                              (INV_REC_f__1_PRE sub$1_0_1)))))))))))
(rule
   (let
      ((x$1_0_1 x$1_0_old_1))
      (let
         ((cmp$1_0_1 (> x$1_0_1 0)))
         (let
            ((sub$1_0_1 (- x$1_0_1 1))
             (x$2_0_1 x$2_0_old_1))
            (let
               ((cmp$2_0_1 (> x$2_0_1 1)))
               (let
                  ((x.addr.0$2_0_1 x$2_0_1))
                  (let
                     ((cmp1$2_0_1 (< x.addr.0$2_0_1 0)))
                     (let
                        ((.x.addr.0$2_0_1 (ite cmp1$2_0_1 0 x.addr.0$2_0_1)))
                        (let
                           ((result$2_1 .x.addr.0$2_0_1))
                           (let
                              ((add$1_0_1 (+ call$1_0_1 1)))
                              (let
                                 ((x.addr.0$1_0_1 add$1_0_1))
                                 (let
                                    ((cmp1$1_0_1 (< x.addr.0$1_0_1 0)))
                                    (let
                                       ((.x.addr.0$1_0_1 (ite cmp1$1_0_1 0 x.addr.0$1_0_1)))
                                       (let
                                          ((result$1_1 .x.addr.0$1_0_1))
                                          (=>
                                             (and
                                                (INV_REC_f^f_PRE x$1_0_old_1 x$2_0_old_1)
                                                cmp$1_0_1
                                                (not cmp$2_0_1)
                                                (INV_REC_f__1 sub$1_0_1 call$1_0_1))
                                             (INV_REC_f^f x$1_0_old_1 x$2_0_old_1 result$1_1 result$2_1))))))))))))))))
(rule
   (let
      ((x$1_0_1 x$1_0_old_1))
      (let
         ((cmp$1_0_1 (> x$1_0_1 0)))
         (let
            ((x.addr.0$1_0_1 x$1_0_1))
            (let
               ((cmp1$1_0_1 (< x.addr.0$1_0_1 0)))
               (let
                  ((.x.addr.0$1_0_1 (ite cmp1$1_0_1 0 x.addr.0$1_0_1)))
                  (let
                     ((result$1_1 .x.addr.0$1_0_1)
                      (x$2_0_1 x$2_0_old_1))
                     (let
                        ((cmp$2_0_1 (> x$2_0_1 1)))
                        (let
                           ((sub$2_0_1 (- x$2_0_1 2)))
                           (=>
                              (and
                                 (INV_REC_f^f_PRE x$1_0_old_1 x$2_0_old_1)
                                 (not cmp$1_0_1)
                                 cmp$2_0_1)
                              (INV_REC_f__2_PRE sub$2_0_1)))))))))))
(rule
   (let
      ((x$1_0_1 x$1_0_old_1))
      (let
         ((cmp$1_0_1 (> x$1_0_1 0)))
         (let
            ((x.addr.0$1_0_1 x$1_0_1))
            (let
               ((cmp1$1_0_1 (< x.addr.0$1_0_1 0)))
               (let
                  ((.x.addr.0$1_0_1 (ite cmp1$1_0_1 0 x.addr.0$1_0_1)))
                  (let
                     ((result$1_1 .x.addr.0$1_0_1)
                      (x$2_0_1 x$2_0_old_1))
                     (let
                        ((cmp$2_0_1 (> x$2_0_1 1)))
                        (let
                           ((sub$2_0_1 (- x$2_0_1 2)))
                           (let
                              ((add$2_0_1 (+ call$2_0_1 2)))
                              (let
                                 ((x.addr.0$2_0_1 add$2_0_1))
                                 (let
                                    ((cmp1$2_0_1 (< x.addr.0$2_0_1 0)))
                                    (let
                                       ((.x.addr.0$2_0_1 (ite cmp1$2_0_1 0 x.addr.0$2_0_1)))
                                       (let
                                          ((result$2_1 .x.addr.0$2_0_1))
                                          (=>
                                             (and
                                                (INV_REC_f^f_PRE x$1_0_old_1 x$2_0_old_1)
                                                (not cmp$1_0_1)
                                                cmp$2_0_1
                                                (INV_REC_f__2 sub$2_0_1 call$2_0_1))
                                             (INV_REC_f^f x$1_0_old_1 x$2_0_old_1 result$1_1 result$2_1))))))))))))))))
(rule
   (let
      ((x$1_0_1 x$1_0_old_1))
      (let
         ((cmp$1_0_1 (> x$1_0_1 0)))
         (let
            ((x.addr.0$1_0_1 x$1_0_1))
            (let
               ((cmp1$1_0_1 (< x.addr.0$1_0_1 0)))
               (let
                  ((.x.addr.0$1_0_1 (ite cmp1$1_0_1 0 x.addr.0$1_0_1)))
                  (let
                     ((result$1_1 .x.addr.0$1_0_1)
                      (x$2_0_1 x$2_0_old_1))
                     (let
                        ((cmp$2_0_1 (> x$2_0_1 1)))
                        (let
                           ((x.addr.0$2_0_1 x$2_0_1))
                           (let
                              ((cmp1$2_0_1 (< x.addr.0$2_0_1 0)))
                              (let
                                 ((.x.addr.0$2_0_1 (ite cmp1$2_0_1 0 x.addr.0$2_0_1)))
                                 (let
                                    ((result$2_1 .x.addr.0$2_0_1))
                                    (=>
                                       (and
                                          (INV_REC_f^f_PRE x$1_0_old_1 x$2_0_old_1)
                                          (not cmp$1_0_1)
                                          (not cmp$2_0_1))
                                       (INV_REC_f^f x$1_0_old_1 x$2_0_old_1 result$1_1 result$2_1))))))))))))))
(rule
   (let
      ((x$1_0_1 x$1_0_old_1))
      (let
         ((cmp$1_0_1 (> x$1_0_1 0)))
         (let
            ((sub$1_0_1 (- x$1_0_1 1)))
            (=>
               (and
                  (INV_REC_f__1_PRE x$1_0_old_1)
                  cmp$1_0_1)
               (INV_REC_f__1_PRE sub$1_0_1))))))
(rule
   (let
      ((x$1_0_1 x$1_0_old_1))
      (let
         ((cmp$1_0_1 (> x$1_0_1 0)))
         (let
            ((sub$1_0_1 (- x$1_0_1 1)))
            (let
               ((add$1_0_1 (+ call$1_0_1 1)))
               (let
                  ((x.addr.0$1_0_1 add$1_0_1))
                  (let
                     ((cmp1$1_0_1 (< x.addr.0$1_0_1 0)))
                     (let
                        ((.x.addr.0$1_0_1 (ite cmp1$1_0_1 0 x.addr.0$1_0_1)))
                        (let
                           ((result$1_1 .x.addr.0$1_0_1))
                           (=>
                              (and
                                 (INV_REC_f__1_PRE x$1_0_old_1)
                                 cmp$1_0_1
                                 (INV_REC_f__1 sub$1_0_1 call$1_0_1))
                              (INV_REC_f__1 x$1_0_old_1 result$1_1)))))))))))
(rule
   (let
      ((x$1_0_1 x$1_0_old_1))
      (let
         ((cmp$1_0_1 (> x$1_0_1 0)))
         (let
            ((x.addr.0$1_0_1 x$1_0_1))
            (let
               ((cmp1$1_0_1 (< x.addr.0$1_0_1 0)))
               (let
                  ((.x.addr.0$1_0_1 (ite cmp1$1_0_1 0 x.addr.0$1_0_1)))
                  (let
                     ((result$1_1 .x.addr.0$1_0_1))
                     (=>
                        (and
                           (INV_REC_f__1_PRE x$1_0_old_1)
                           (not cmp$1_0_1))
                        (INV_REC_f__1 x$1_0_old_1 result$1_1)))))))))
(rule
   (let
      ((x$2_0_1 x$2_0_old_1))
      (let
         ((cmp$2_0_1 (> x$2_0_1 1)))
         (let
            ((sub$2_0_1 (- x$2_0_1 2)))
            (=>
               (and
                  (INV_REC_f__2_PRE x$2_0_old_1)
                  cmp$2_0_1)
               (INV_REC_f__2_PRE sub$2_0_1))))))
(rule
   (let
      ((x$2_0_1 x$2_0_old_1))
      (let
         ((cmp$2_0_1 (> x$2_0_1 1)))
         (let
            ((sub$2_0_1 (- x$2_0_1 2)))
            (let
               ((add$2_0_1 (+ call$2_0_1 2)))
               (let
                  ((x.addr.0$2_0_1 add$2_0_1))
                  (let
                     ((cmp1$2_0_1 (< x.addr.0$2_0_1 0)))
                     (let
                        ((.x.addr.0$2_0_1 (ite cmp1$2_0_1 0 x.addr.0$2_0_1)))
                        (let
                           ((result$2_1 .x.addr.0$2_0_1))
                           (=>
                              (and
                                 (INV_REC_f__2_PRE x$2_0_old_1)
                                 cmp$2_0_1
                                 (INV_REC_f__2 sub$2_0_1 call$2_0_1))
                              (INV_REC_f__2 x$2_0_old_1 result$2_1)))))))))))
(rule
   (let
      ((x$2_0_1 x$2_0_old_1))
      (let
         ((cmp$2_0_1 (> x$2_0_1 1)))
         (let
            ((x.addr.0$2_0_1 x$2_0_1))
            (let
               ((cmp1$2_0_1 (< x.addr.0$2_0_1 0)))
               (let
                  ((.x.addr.0$2_0_1 (ite cmp1$2_0_1 0 x.addr.0$2_0_1)))
                  (let
                     ((result$2_1 .x.addr.0$2_0_1))
                     (=>
                        (and
                           (INV_REC_f__2_PRE x$2_0_old_1)
                           (not cmp$2_0_1))
                        (INV_REC_f__2 x$2_0_old_1 result$2_1)))))))))
(query
   END_QUERY
   :print-certificate
   true)
