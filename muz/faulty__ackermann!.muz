;; Produced by llreve (commit dc2abeaa50d9197d51fa4223b58154246b164df0)
;; See https://formal.iti.kit.edu/reve and https://github.com/mattulbrich/llreve/
;; (c) 2018 KIT

(set-option
   :int-real-coercions
   false)
(declare-var
   call$2_0_1
   Int)
(declare-var
   call6$1_0_1
   Int)
(declare-var
   call6$2_0_1
   Int)
(declare-var
   call8$1_0_1
   Int)
(declare-var
   call8$2_0_1
   Int)
(declare-var
   m$1_0_old_1
   Int)
(declare-var
   m$2_0_old_1
   Int)
(declare-var
   n$1_0_old_1
   Int)
(declare-var
   n$2_0_old_1
   Int)
(declare-rel
   END_QUERY
   ())
(define-fun
   IN_INV
   ((m$1_0 Int)
    (n$1_0 Int)
    (m$2_0 Int)
    (n$2_0 Int))
   Bool
   (and
      (= m$1_0 m$2_0)
      (= n$1_0 n$2_0)))
(define-fun
   OUT_INV
   ((result$1 Int)
    (result$2 Int))
   Bool
   (= result$1 result$2))
(declare-rel
   INV_REC_f^f
   (Int
    Int
    Int
    Int
    Int
    Int))
(declare-rel
   INV_REC_f^f_PRE
   (Int
    Int
    Int
    Int))
(declare-rel
   INV_REC_f__1
   (Int
    Int
    Int))
(declare-rel
   INV_REC_f__1_PRE
   (Int
    Int))
(declare-rel
   INV_REC_f__2
   (Int
    Int
    Int))
(declare-rel
   INV_REC_f__2_PRE
   (Int
    Int))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((add$1_0_1 (+ n$1_0_1 1)))
            (let
               ((r.1$1_0_1 add$1_0_1))
               (let
                  ((result$1_1 r.1$1_0_1)
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((sub$2_0_1 (- m$2_0_1 1)))
                           (=>
                              (and
                                 (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                 cmp$1_0_1
                                 or.cond$2_0_1)
                              (INV_REC_f__2_PRE sub$2_0_1 1)))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((add$1_0_1 (+ n$1_0_1 1)))
            (let
               ((r.1$1_0_1 add$1_0_1))
               (let
                  ((result$1_1 r.1$1_0_1)
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((sub$2_0_1 (- m$2_0_1 1)))
                           (let
                              ((r.1$2_0_1 call$2_0_1))
                              (let
                                 ((result$2_1 r.1$2_0_1))
                                 (=>
                                    (and
                                       (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                       cmp$1_0_1
                                       or.cond$2_0_1
                                       (INV_REC_f__2 sub$2_0_1 1 call$2_0_1)
                                       (not (OUT_INV result$1_1 result$2_1)))
                                    END_QUERY))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((add$1_0_1 (+ n$1_0_1 1)))
            (let
               ((r.1$1_0_1 add$1_0_1))
               (let
                  ((result$1_1 r.1$1_0_1)
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((add$2_0_1 (+ n$2_0_1 1)))
                              (let
                                 ((r.1$2_0_1 add$2_0_1))
                                 (let
                                    ((result$2_1 r.1$2_0_1))
                                    (=>
                                       (and
                                          (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                          cmp$1_0_1
                                          (not or.cond$2_0_1)
                                          cmp2$2_0_1
                                          (not (OUT_INV result$1_1 result$2_1)))
                                       END_QUERY)))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((add$1_0_1 (+ n$1_0_1 1)))
            (let
               ((r.1$1_0_1 add$1_0_1))
               (let
                  ((result$1_1 r.1$1_0_1)
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((sub5$2_0_1 (- n$2_0_1 1)))
                              (=>
                                 (and
                                    (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                    cmp$1_0_1
                                    (not or.cond$2_0_1)
                                    (not cmp2$2_0_1))
                                 (INV_REC_f__2_PRE m$2_0_1 sub5$2_0_1))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((add$1_0_1 (+ n$1_0_1 1)))
            (let
               ((r.1$1_0_1 add$1_0_1))
               (let
                  ((result$1_1 r.1$1_0_1)
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((sub5$2_0_1 (- n$2_0_1 1)))
                              (let
                                 ((sub7$2_0_1 (- m$2_0_1 1)))
                                 (=>
                                    (and
                                       (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                       cmp$1_0_1
                                       (not or.cond$2_0_1)
                                       (not cmp2$2_0_1)
                                       (INV_REC_f__2 m$2_0_1 sub5$2_0_1 call6$2_0_1))
                                    (INV_REC_f__2_PRE sub7$2_0_1 call6$2_0_1)))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((add$1_0_1 (+ n$1_0_1 1)))
            (let
               ((r.1$1_0_1 add$1_0_1))
               (let
                  ((result$1_1 r.1$1_0_1)
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((sub5$2_0_1 (- n$2_0_1 1)))
                              (let
                                 ((sub7$2_0_1 (- m$2_0_1 1)))
                                 (let
                                    ((r.1$2_0_1 call8$2_0_1))
                                    (let
                                       ((result$2_1 r.1$2_0_1))
                                       (=>
                                          (and
                                             (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                             cmp$1_0_1
                                             (not or.cond$2_0_1)
                                             (not cmp2$2_0_1)
                                             (INV_REC_f__2 m$2_0_1 sub5$2_0_1 call6$2_0_1)
                                             (INV_REC_f__2 sub7$2_0_1 call6$2_0_1 call8$2_0_1)
                                             (not (OUT_INV result$1_1 result$2_1)))
                                          END_QUERY))))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((call6.sink$1_0_1 1)
                   (sub7$1_0_1 (- m$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((sub$2_0_1 (- m$2_0_1 1)))
                           (=>
                              (and
                                 (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                 (not cmp$1_0_1)
                                 or.cond$1_0_1
                                 or.cond$2_0_1)
                              (INV_REC_f^f_PRE sub7$1_0_1 call6.sink$1_0_1 sub$2_0_1 1)))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((call6.sink$1_0_1 1)
                   (sub7$1_0_1 (- m$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((sub$2_0_1 (- m$2_0_1 1)))
                           (let
                              ((r.1$1_0_1 call8$1_0_1))
                              (let
                                 ((result$1_1 r.1$1_0_1)
                                  (r.1$2_0_1 call$2_0_1))
                                 (let
                                    ((result$2_1 r.1$2_0_1))
                                    (=>
                                       (and
                                          (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                          (not cmp$1_0_1)
                                          or.cond$1_0_1
                                          or.cond$2_0_1
                                          (INV_REC_f^f sub7$1_0_1 call6.sink$1_0_1 sub$2_0_1 1 call8$1_0_1 call$2_0_1)
                                          (not (OUT_INV result$1_1 result$2_1)))
                                       END_QUERY)))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((call6.sink$1_0_1 1)
                   (sub7$1_0_1 (- m$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((add$2_0_1 (+ n$2_0_1 1)))
                              (let
                                 ((r.1$2_0_1 add$2_0_1))
                                 (let
                                    ((result$2_1 r.1$2_0_1))
                                    (=>
                                       (and
                                          (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                          (not cmp$1_0_1)
                                          or.cond$1_0_1
                                          (not or.cond$2_0_1)
                                          cmp2$2_0_1)
                                       (INV_REC_f__1_PRE sub7$1_0_1 call6.sink$1_0_1))))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((call6.sink$1_0_1 1)
                   (sub7$1_0_1 (- m$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((add$2_0_1 (+ n$2_0_1 1)))
                              (let
                                 ((r.1$2_0_1 add$2_0_1))
                                 (let
                                    ((result$2_1 r.1$2_0_1))
                                    (let
                                       ((r.1$1_0_1 call8$1_0_1))
                                       (let
                                          ((result$1_1 r.1$1_0_1))
                                          (=>
                                             (and
                                                (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                                (not cmp$1_0_1)
                                                or.cond$1_0_1
                                                (not or.cond$2_0_1)
                                                cmp2$2_0_1
                                                (INV_REC_f__1 sub7$1_0_1 call6.sink$1_0_1 call8$1_0_1)
                                                (not (OUT_INV result$1_1 result$2_1)))
                                             END_QUERY)))))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((call6.sink$1_0_1 1)
                   (sub7$1_0_1 (- m$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((sub5$2_0_1 (- n$2_0_1 1)))
                              (=>
                                 (and
                                    (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                    (not cmp$1_0_1)
                                    or.cond$1_0_1
                                    (not or.cond$2_0_1)
                                    (not cmp2$2_0_1))
                                 (INV_REC_f__2_PRE m$2_0_1 sub5$2_0_1))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((call6.sink$1_0_1 1)
                   (sub7$1_0_1 (- m$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((sub5$2_0_1 (- n$2_0_1 1)))
                              (let
                                 ((sub7$2_0_1 (- m$2_0_1 1)))
                                 (=>
                                    (and
                                       (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                       (not cmp$1_0_1)
                                       or.cond$1_0_1
                                       (not or.cond$2_0_1)
                                       (not cmp2$2_0_1)
                                       (INV_REC_f__2 m$2_0_1 sub5$2_0_1 call6$2_0_1))
                                    (INV_REC_f^f_PRE sub7$1_0_1 call6.sink$1_0_1 sub7$2_0_1 call6$2_0_1)))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((call6.sink$1_0_1 1)
                   (sub7$1_0_1 (- m$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((sub5$2_0_1 (- n$2_0_1 1)))
                              (let
                                 ((sub7$2_0_1 (- m$2_0_1 1)))
                                 (let
                                    ((r.1$1_0_1 call8$1_0_1))
                                    (let
                                       ((result$1_1 r.1$1_0_1)
                                        (r.1$2_0_1 call8$2_0_1))
                                       (let
                                          ((result$2_1 r.1$2_0_1))
                                          (=>
                                             (and
                                                (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                                (not cmp$1_0_1)
                                                or.cond$1_0_1
                                                (not or.cond$2_0_1)
                                                (not cmp2$2_0_1)
                                                (INV_REC_f__2 m$2_0_1 sub5$2_0_1 call6$2_0_1)
                                                (INV_REC_f^f sub7$1_0_1 call6.sink$1_0_1 sub7$2_0_1 call6$2_0_1 call8$1_0_1 call8$2_0_1)
                                                (not (OUT_INV result$1_1 result$2_1)))
                                             END_QUERY)))))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((sub$2_0_1 (- m$2_0_1 1)))
                           (=>
                              (and
                                 (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                 (not cmp$1_0_1)
                                 (not or.cond$1_0_1)
                                 or.cond$2_0_1)
                              (INV_REC_f__1_PRE m$1_0_1 sub5$1_0_1)))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((sub$2_0_1 (- m$2_0_1 1)))
                           (let
                              ((call6.sink$1_0_1 call6$1_0_1)
                               (sub7$1_0_1 (- m$1_0_1 1)))
                              (=>
                                 (and
                                    (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                    (not cmp$1_0_1)
                                    (not or.cond$1_0_1)
                                    or.cond$2_0_1
                                    (INV_REC_f__1 m$1_0_1 sub5$1_0_1 call6$1_0_1))
                                 (INV_REC_f^f_PRE sub7$1_0_1 call6.sink$1_0_1 sub$2_0_1 1))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((sub$2_0_1 (- m$2_0_1 1)))
                           (let
                              ((call6.sink$1_0_1 call6$1_0_1)
                               (sub7$1_0_1 (- m$1_0_1 1)))
                              (let
                                 ((r.1$1_0_1 call8$1_0_1))
                                 (let
                                    ((result$1_1 r.1$1_0_1)
                                     (r.1$2_0_1 call$2_0_1))
                                    (let
                                       ((result$2_1 r.1$2_0_1))
                                       (=>
                                          (and
                                             (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                             (not cmp$1_0_1)
                                             (not or.cond$1_0_1)
                                             or.cond$2_0_1
                                             (INV_REC_f__1 m$1_0_1 sub5$1_0_1 call6$1_0_1)
                                             (INV_REC_f^f sub7$1_0_1 call6.sink$1_0_1 sub$2_0_1 1 call8$1_0_1 call$2_0_1)
                                             (not (OUT_INV result$1_1 result$2_1)))
                                          END_QUERY))))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((add$2_0_1 (+ n$2_0_1 1)))
                              (let
                                 ((r.1$2_0_1 add$2_0_1))
                                 (let
                                    ((result$2_1 r.1$2_0_1))
                                    (=>
                                       (and
                                          (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                          (not cmp$1_0_1)
                                          (not or.cond$1_0_1)
                                          (not or.cond$2_0_1)
                                          cmp2$2_0_1)
                                       (INV_REC_f__1_PRE m$1_0_1 sub5$1_0_1))))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((add$2_0_1 (+ n$2_0_1 1)))
                              (let
                                 ((r.1$2_0_1 add$2_0_1))
                                 (let
                                    ((result$2_1 r.1$2_0_1))
                                    (let
                                       ((call6.sink$1_0_1 call6$1_0_1)
                                        (sub7$1_0_1 (- m$1_0_1 1)))
                                       (=>
                                          (and
                                             (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                             (not cmp$1_0_1)
                                             (not or.cond$1_0_1)
                                             (not or.cond$2_0_1)
                                             cmp2$2_0_1
                                             (INV_REC_f__1 m$1_0_1 sub5$1_0_1 call6$1_0_1))
                                          (INV_REC_f__1_PRE sub7$1_0_1 call6.sink$1_0_1)))))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((add$2_0_1 (+ n$2_0_1 1)))
                              (let
                                 ((r.1$2_0_1 add$2_0_1))
                                 (let
                                    ((result$2_1 r.1$2_0_1))
                                    (let
                                       ((call6.sink$1_0_1 call6$1_0_1)
                                        (sub7$1_0_1 (- m$1_0_1 1)))
                                       (let
                                          ((r.1$1_0_1 call8$1_0_1))
                                          (let
                                             ((result$1_1 r.1$1_0_1))
                                             (=>
                                                (and
                                                   (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                                   (not cmp$1_0_1)
                                                   (not or.cond$1_0_1)
                                                   (not or.cond$2_0_1)
                                                   cmp2$2_0_1
                                                   (INV_REC_f__1 m$1_0_1 sub5$1_0_1 call6$1_0_1)
                                                   (INV_REC_f__1 sub7$1_0_1 call6.sink$1_0_1 call8$1_0_1)
                                                   (not (OUT_INV result$1_1 result$2_1)))
                                                END_QUERY))))))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((sub5$2_0_1 (- n$2_0_1 1)))
                              (=>
                                 (and
                                    (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                    (not cmp$1_0_1)
                                    (not or.cond$1_0_1)
                                    (not or.cond$2_0_1)
                                    (not cmp2$2_0_1))
                                 (INV_REC_f^f_PRE m$1_0_1 sub5$1_0_1 m$2_0_1 sub5$2_0_1))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((sub5$2_0_1 (- n$2_0_1 1)))
                              (let
                                 ((call6.sink$1_0_1 call6$1_0_1)
                                  (sub7$1_0_1 (- m$1_0_1 1))
                                  (sub7$2_0_1 (- m$2_0_1 1)))
                                 (=>
                                    (and
                                       (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                       (not cmp$1_0_1)
                                       (not or.cond$1_0_1)
                                       (not or.cond$2_0_1)
                                       (not cmp2$2_0_1)
                                       (INV_REC_f^f m$1_0_1 sub5$1_0_1 m$2_0_1 sub5$2_0_1 call6$1_0_1 call6$2_0_1))
                                    (INV_REC_f^f_PRE sub7$1_0_1 call6.sink$1_0_1 sub7$2_0_1 call6$2_0_1)))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((sub5$2_0_1 (- n$2_0_1 1)))
                              (let
                                 ((call6.sink$1_0_1 call6$1_0_1)
                                  (sub7$1_0_1 (- m$1_0_1 1))
                                  (sub7$2_0_1 (- m$2_0_1 1)))
                                 (let
                                    ((r.1$1_0_1 call8$1_0_1))
                                    (let
                                       ((result$1_1 r.1$1_0_1)
                                        (r.1$2_0_1 call8$2_0_1))
                                       (let
                                          ((result$2_1 r.1$2_0_1))
                                          (=>
                                             (and
                                                (IN_INV m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                                (not cmp$1_0_1)
                                                (not or.cond$1_0_1)
                                                (not or.cond$2_0_1)
                                                (not cmp2$2_0_1)
                                                (INV_REC_f^f m$1_0_1 sub5$1_0_1 m$2_0_1 sub5$2_0_1 call6$1_0_1 call6$2_0_1)
                                                (INV_REC_f^f sub7$1_0_1 call6.sink$1_0_1 sub7$2_0_1 call6$2_0_1 call8$1_0_1 call8$2_0_1)
                                                (not (OUT_INV result$1_1 result$2_1)))
                                             END_QUERY)))))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((add$1_0_1 (+ n$1_0_1 1)))
            (let
               ((r.1$1_0_1 add$1_0_1))
               (let
                  ((result$1_1 r.1$1_0_1)
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((sub$2_0_1 (- m$2_0_1 1)))
                           (=>
                              (and
                                 (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                 cmp$1_0_1
                                 or.cond$2_0_1)
                              (INV_REC_f__2_PRE sub$2_0_1 1)))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((add$1_0_1 (+ n$1_0_1 1)))
            (let
               ((r.1$1_0_1 add$1_0_1))
               (let
                  ((result$1_1 r.1$1_0_1)
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((sub$2_0_1 (- m$2_0_1 1)))
                           (let
                              ((r.1$2_0_1 call$2_0_1))
                              (let
                                 ((result$2_1 r.1$2_0_1))
                                 (=>
                                    (and
                                       (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                       cmp$1_0_1
                                       or.cond$2_0_1
                                       (INV_REC_f__2 sub$2_0_1 1 call$2_0_1))
                                    (INV_REC_f^f m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1 result$1_1 result$2_1)))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((add$1_0_1 (+ n$1_0_1 1)))
            (let
               ((r.1$1_0_1 add$1_0_1))
               (let
                  ((result$1_1 r.1$1_0_1)
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((add$2_0_1 (+ n$2_0_1 1)))
                              (let
                                 ((r.1$2_0_1 add$2_0_1))
                                 (let
                                    ((result$2_1 r.1$2_0_1))
                                    (=>
                                       (and
                                          (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                          cmp$1_0_1
                                          (not or.cond$2_0_1)
                                          cmp2$2_0_1)
                                       (INV_REC_f^f m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1 result$1_1 result$2_1))))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((add$1_0_1 (+ n$1_0_1 1)))
            (let
               ((r.1$1_0_1 add$1_0_1))
               (let
                  ((result$1_1 r.1$1_0_1)
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((sub5$2_0_1 (- n$2_0_1 1)))
                              (=>
                                 (and
                                    (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                    cmp$1_0_1
                                    (not or.cond$2_0_1)
                                    (not cmp2$2_0_1))
                                 (INV_REC_f__2_PRE m$2_0_1 sub5$2_0_1))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((add$1_0_1 (+ n$1_0_1 1)))
            (let
               ((r.1$1_0_1 add$1_0_1))
               (let
                  ((result$1_1 r.1$1_0_1)
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((sub5$2_0_1 (- n$2_0_1 1)))
                              (let
                                 ((sub7$2_0_1 (- m$2_0_1 1)))
                                 (=>
                                    (and
                                       (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                       cmp$1_0_1
                                       (not or.cond$2_0_1)
                                       (not cmp2$2_0_1)
                                       (INV_REC_f__2 m$2_0_1 sub5$2_0_1 call6$2_0_1))
                                    (INV_REC_f__2_PRE sub7$2_0_1 call6$2_0_1)))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((add$1_0_1 (+ n$1_0_1 1)))
            (let
               ((r.1$1_0_1 add$1_0_1))
               (let
                  ((result$1_1 r.1$1_0_1)
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((sub5$2_0_1 (- n$2_0_1 1)))
                              (let
                                 ((sub7$2_0_1 (- m$2_0_1 1)))
                                 (let
                                    ((r.1$2_0_1 call8$2_0_1))
                                    (let
                                       ((result$2_1 r.1$2_0_1))
                                       (=>
                                          (and
                                             (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                             cmp$1_0_1
                                             (not or.cond$2_0_1)
                                             (not cmp2$2_0_1)
                                             (INV_REC_f__2 m$2_0_1 sub5$2_0_1 call6$2_0_1)
                                             (INV_REC_f__2 sub7$2_0_1 call6$2_0_1 call8$2_0_1))
                                          (INV_REC_f^f m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1 result$1_1 result$2_1)))))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((call6.sink$1_0_1 1)
                   (sub7$1_0_1 (- m$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((sub$2_0_1 (- m$2_0_1 1)))
                           (=>
                              (and
                                 (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                 (not cmp$1_0_1)
                                 or.cond$1_0_1
                                 or.cond$2_0_1)
                              (INV_REC_f^f_PRE sub7$1_0_1 call6.sink$1_0_1 sub$2_0_1 1)))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((call6.sink$1_0_1 1)
                   (sub7$1_0_1 (- m$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((sub$2_0_1 (- m$2_0_1 1)))
                           (let
                              ((r.1$1_0_1 call8$1_0_1))
                              (let
                                 ((result$1_1 r.1$1_0_1)
                                  (r.1$2_0_1 call$2_0_1))
                                 (let
                                    ((result$2_1 r.1$2_0_1))
                                    (=>
                                       (and
                                          (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                          (not cmp$1_0_1)
                                          or.cond$1_0_1
                                          or.cond$2_0_1
                                          (INV_REC_f^f sub7$1_0_1 call6.sink$1_0_1 sub$2_0_1 1 call8$1_0_1 call$2_0_1))
                                       (INV_REC_f^f m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1 result$1_1 result$2_1))))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((call6.sink$1_0_1 1)
                   (sub7$1_0_1 (- m$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((add$2_0_1 (+ n$2_0_1 1)))
                              (let
                                 ((r.1$2_0_1 add$2_0_1))
                                 (let
                                    ((result$2_1 r.1$2_0_1))
                                    (=>
                                       (and
                                          (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                          (not cmp$1_0_1)
                                          or.cond$1_0_1
                                          (not or.cond$2_0_1)
                                          cmp2$2_0_1)
                                       (INV_REC_f__1_PRE sub7$1_0_1 call6.sink$1_0_1))))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((call6.sink$1_0_1 1)
                   (sub7$1_0_1 (- m$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((add$2_0_1 (+ n$2_0_1 1)))
                              (let
                                 ((r.1$2_0_1 add$2_0_1))
                                 (let
                                    ((result$2_1 r.1$2_0_1))
                                    (let
                                       ((r.1$1_0_1 call8$1_0_1))
                                       (let
                                          ((result$1_1 r.1$1_0_1))
                                          (=>
                                             (and
                                                (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                                (not cmp$1_0_1)
                                                or.cond$1_0_1
                                                (not or.cond$2_0_1)
                                                cmp2$2_0_1
                                                (INV_REC_f__1 sub7$1_0_1 call6.sink$1_0_1 call8$1_0_1))
                                             (INV_REC_f^f m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1 result$1_1 result$2_1))))))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((call6.sink$1_0_1 1)
                   (sub7$1_0_1 (- m$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((sub5$2_0_1 (- n$2_0_1 1)))
                              (=>
                                 (and
                                    (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                    (not cmp$1_0_1)
                                    or.cond$1_0_1
                                    (not or.cond$2_0_1)
                                    (not cmp2$2_0_1))
                                 (INV_REC_f__2_PRE m$2_0_1 sub5$2_0_1))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((call6.sink$1_0_1 1)
                   (sub7$1_0_1 (- m$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((sub5$2_0_1 (- n$2_0_1 1)))
                              (let
                                 ((sub7$2_0_1 (- m$2_0_1 1)))
                                 (=>
                                    (and
                                       (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                       (not cmp$1_0_1)
                                       or.cond$1_0_1
                                       (not or.cond$2_0_1)
                                       (not cmp2$2_0_1)
                                       (INV_REC_f__2 m$2_0_1 sub5$2_0_1 call6$2_0_1))
                                    (INV_REC_f^f_PRE sub7$1_0_1 call6.sink$1_0_1 sub7$2_0_1 call6$2_0_1)))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((call6.sink$1_0_1 1)
                   (sub7$1_0_1 (- m$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((sub5$2_0_1 (- n$2_0_1 1)))
                              (let
                                 ((sub7$2_0_1 (- m$2_0_1 1)))
                                 (let
                                    ((r.1$1_0_1 call8$1_0_1))
                                    (let
                                       ((result$1_1 r.1$1_0_1)
                                        (r.1$2_0_1 call8$2_0_1))
                                       (let
                                          ((result$2_1 r.1$2_0_1))
                                          (=>
                                             (and
                                                (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                                (not cmp$1_0_1)
                                                or.cond$1_0_1
                                                (not or.cond$2_0_1)
                                                (not cmp2$2_0_1)
                                                (INV_REC_f__2 m$2_0_1 sub5$2_0_1 call6$2_0_1)
                                                (INV_REC_f^f sub7$1_0_1 call6.sink$1_0_1 sub7$2_0_1 call6$2_0_1 call8$1_0_1 call8$2_0_1))
                                             (INV_REC_f^f m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1 result$1_1 result$2_1))))))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((sub$2_0_1 (- m$2_0_1 1)))
                           (=>
                              (and
                                 (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                 (not cmp$1_0_1)
                                 (not or.cond$1_0_1)
                                 or.cond$2_0_1)
                              (INV_REC_f__1_PRE m$1_0_1 sub5$1_0_1)))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((sub$2_0_1 (- m$2_0_1 1)))
                           (let
                              ((call6.sink$1_0_1 call6$1_0_1)
                               (sub7$1_0_1 (- m$1_0_1 1)))
                              (=>
                                 (and
                                    (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                    (not cmp$1_0_1)
                                    (not or.cond$1_0_1)
                                    or.cond$2_0_1
                                    (INV_REC_f__1 m$1_0_1 sub5$1_0_1 call6$1_0_1))
                                 (INV_REC_f^f_PRE sub7$1_0_1 call6.sink$1_0_1 sub$2_0_1 1))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((sub$2_0_1 (- m$2_0_1 1)))
                           (let
                              ((call6.sink$1_0_1 call6$1_0_1)
                               (sub7$1_0_1 (- m$1_0_1 1)))
                              (let
                                 ((r.1$1_0_1 call8$1_0_1))
                                 (let
                                    ((result$1_1 r.1$1_0_1)
                                     (r.1$2_0_1 call$2_0_1))
                                    (let
                                       ((result$2_1 r.1$2_0_1))
                                       (=>
                                          (and
                                             (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                             (not cmp$1_0_1)
                                             (not or.cond$1_0_1)
                                             or.cond$2_0_1
                                             (INV_REC_f__1 m$1_0_1 sub5$1_0_1 call6$1_0_1)
                                             (INV_REC_f^f sub7$1_0_1 call6.sink$1_0_1 sub$2_0_1 1 call8$1_0_1 call$2_0_1))
                                          (INV_REC_f^f m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1 result$1_1 result$2_1)))))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((add$2_0_1 (+ n$2_0_1 1)))
                              (let
                                 ((r.1$2_0_1 add$2_0_1))
                                 (let
                                    ((result$2_1 r.1$2_0_1))
                                    (=>
                                       (and
                                          (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                          (not cmp$1_0_1)
                                          (not or.cond$1_0_1)
                                          (not or.cond$2_0_1)
                                          cmp2$2_0_1)
                                       (INV_REC_f__1_PRE m$1_0_1 sub5$1_0_1))))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((add$2_0_1 (+ n$2_0_1 1)))
                              (let
                                 ((r.1$2_0_1 add$2_0_1))
                                 (let
                                    ((result$2_1 r.1$2_0_1))
                                    (let
                                       ((call6.sink$1_0_1 call6$1_0_1)
                                        (sub7$1_0_1 (- m$1_0_1 1)))
                                       (=>
                                          (and
                                             (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                             (not cmp$1_0_1)
                                             (not or.cond$1_0_1)
                                             (not or.cond$2_0_1)
                                             cmp2$2_0_1
                                             (INV_REC_f__1 m$1_0_1 sub5$1_0_1 call6$1_0_1))
                                          (INV_REC_f__1_PRE sub7$1_0_1 call6.sink$1_0_1)))))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((add$2_0_1 (+ n$2_0_1 1)))
                              (let
                                 ((r.1$2_0_1 add$2_0_1))
                                 (let
                                    ((result$2_1 r.1$2_0_1))
                                    (let
                                       ((call6.sink$1_0_1 call6$1_0_1)
                                        (sub7$1_0_1 (- m$1_0_1 1)))
                                       (let
                                          ((r.1$1_0_1 call8$1_0_1))
                                          (let
                                             ((result$1_1 r.1$1_0_1))
                                             (=>
                                                (and
                                                   (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                                   (not cmp$1_0_1)
                                                   (not or.cond$1_0_1)
                                                   (not or.cond$2_0_1)
                                                   cmp2$2_0_1
                                                   (INV_REC_f__1 m$1_0_1 sub5$1_0_1 call6$1_0_1)
                                                   (INV_REC_f__1 sub7$1_0_1 call6.sink$1_0_1 call8$1_0_1))
                                                (INV_REC_f^f m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1 result$1_1 result$2_1)))))))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((sub5$2_0_1 (- n$2_0_1 1)))
                              (=>
                                 (and
                                    (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                    (not cmp$1_0_1)
                                    (not or.cond$1_0_1)
                                    (not or.cond$2_0_1)
                                    (not cmp2$2_0_1))
                                 (INV_REC_f^f_PRE m$1_0_1 sub5$1_0_1 m$2_0_1 sub5$2_0_1))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((sub5$2_0_1 (- n$2_0_1 1)))
                              (let
                                 ((call6.sink$1_0_1 call6$1_0_1)
                                  (sub7$1_0_1 (- m$1_0_1 1))
                                  (sub7$2_0_1 (- m$2_0_1 1)))
                                 (=>
                                    (and
                                       (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                       (not cmp$1_0_1)
                                       (not or.cond$1_0_1)
                                       (not or.cond$2_0_1)
                                       (not cmp2$2_0_1)
                                       (INV_REC_f^f m$1_0_1 sub5$1_0_1 m$2_0_1 sub5$2_0_1 call6$1_0_1 call6$2_0_1))
                                    (INV_REC_f^f_PRE sub7$1_0_1 call6.sink$1_0_1 sub7$2_0_1 call6$2_0_1)))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1))
                   (m$2_0_1 m$2_0_old_1)
                   (n$2_0_1 n$2_0_old_1))
                  (let
                     ((cmp$2_0_1 (> m$2_0_1 0))
                      (cmp1$2_0_1 (= n$2_0_1 0)))
                     (let
                        ((or.cond$2_0_1 (and
                                            cmp$2_0_1
                                            cmp1$2_0_1)))
                        (let
                           ((cmp2$2_0_1 (= m$2_0_1 1)))
                           (let
                              ((sub5$2_0_1 (- n$2_0_1 1)))
                              (let
                                 ((call6.sink$1_0_1 call6$1_0_1)
                                  (sub7$1_0_1 (- m$1_0_1 1))
                                  (sub7$2_0_1 (- m$2_0_1 1)))
                                 (let
                                    ((r.1$1_0_1 call8$1_0_1))
                                    (let
                                       ((result$1_1 r.1$1_0_1)
                                        (r.1$2_0_1 call8$2_0_1))
                                       (let
                                          ((result$2_1 r.1$2_0_1))
                                          (=>
                                             (and
                                                (INV_REC_f^f_PRE m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1)
                                                (not cmp$1_0_1)
                                                (not or.cond$1_0_1)
                                                (not or.cond$2_0_1)
                                                (not cmp2$2_0_1)
                                                (INV_REC_f^f m$1_0_1 sub5$1_0_1 m$2_0_1 sub5$2_0_1 call6$1_0_1 call6$2_0_1)
                                                (INV_REC_f^f sub7$1_0_1 call6.sink$1_0_1 sub7$2_0_1 call6$2_0_1 call8$1_0_1 call8$2_0_1))
                                             (INV_REC_f^f m$1_0_old_1 n$1_0_old_1 m$2_0_old_1 n$2_0_old_1 result$1_1 result$2_1))))))))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((add$1_0_1 (+ n$1_0_1 1)))
            (let
               ((r.1$1_0_1 add$1_0_1))
               (let
                  ((result$1_1 r.1$1_0_1))
                  (=>
                     (and
                        (INV_REC_f__1_PRE m$1_0_old_1 n$1_0_old_1)
                        cmp$1_0_1)
                     (INV_REC_f__1 m$1_0_old_1 n$1_0_old_1 result$1_1))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((call6.sink$1_0_1 1)
                   (sub7$1_0_1 (- m$1_0_1 1)))
                  (=>
                     (and
                        (INV_REC_f__1_PRE m$1_0_old_1 n$1_0_old_1)
                        (not cmp$1_0_1)
                        or.cond$1_0_1)
                     (INV_REC_f__1_PRE sub7$1_0_1 call6.sink$1_0_1))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((call6.sink$1_0_1 1)
                   (sub7$1_0_1 (- m$1_0_1 1)))
                  (let
                     ((r.1$1_0_1 call8$1_0_1))
                     (let
                        ((result$1_1 r.1$1_0_1))
                        (=>
                           (and
                              (INV_REC_f__1_PRE m$1_0_old_1 n$1_0_old_1)
                              (not cmp$1_0_1)
                              or.cond$1_0_1
                              (INV_REC_f__1 sub7$1_0_1 call6.sink$1_0_1 call8$1_0_1))
                           (INV_REC_f__1 m$1_0_old_1 n$1_0_old_1 result$1_1))))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1)))
                  (=>
                     (and
                        (INV_REC_f__1_PRE m$1_0_old_1 n$1_0_old_1)
                        (not cmp$1_0_1)
                        (not or.cond$1_0_1))
                     (INV_REC_f__1_PRE m$1_0_1 sub5$1_0_1))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1)))
                  (let
                     ((call6.sink$1_0_1 call6$1_0_1)
                      (sub7$1_0_1 (- m$1_0_1 1)))
                     (=>
                        (and
                           (INV_REC_f__1_PRE m$1_0_old_1 n$1_0_old_1)
                           (not cmp$1_0_1)
                           (not or.cond$1_0_1)
                           (INV_REC_f__1 m$1_0_1 sub5$1_0_1 call6$1_0_1))
                        (INV_REC_f__1_PRE sub7$1_0_1 call6.sink$1_0_1)))))))))
(rule
   (let
      ((m$1_0_1 m$1_0_old_1))
      (let
         ((n$1_0_1 n$1_0_old_1)
          (cmp$1_0_1 (= m$1_0_1 0)))
         (let
            ((cmp1$1_0_1 (> m$1_0_1 0))
             (cmp2$1_0_1 (= n$1_0_1 0)))
            (let
               ((or.cond$1_0_1 (and
                                   cmp1$1_0_1
                                   cmp2$1_0_1)))
               (let
                  ((sub5$1_0_1 (- n$1_0_1 1)))
                  (let
                     ((call6.sink$1_0_1 call6$1_0_1)
                      (sub7$1_0_1 (- m$1_0_1 1)))
                     (let
                        ((r.1$1_0_1 call8$1_0_1))
                        (let
                           ((result$1_1 r.1$1_0_1))
                           (=>
                              (and
                                 (INV_REC_f__1_PRE m$1_0_old_1 n$1_0_old_1)
                                 (not cmp$1_0_1)
                                 (not or.cond$1_0_1)
                                 (INV_REC_f__1 m$1_0_1 sub5$1_0_1 call6$1_0_1)
                                 (INV_REC_f__1 sub7$1_0_1 call6.sink$1_0_1 call8$1_0_1))
                              (INV_REC_f__1 m$1_0_old_1 n$1_0_old_1 result$1_1)))))))))))
(rule
   (let
      ((m$2_0_1 m$2_0_old_1)
       (n$2_0_1 n$2_0_old_1))
      (let
         ((cmp$2_0_1 (> m$2_0_1 0))
          (cmp1$2_0_1 (= n$2_0_1 0)))
         (let
            ((or.cond$2_0_1 (and
                                cmp$2_0_1
                                cmp1$2_0_1)))
            (let
               ((sub$2_0_1 (- m$2_0_1 1)))
               (=>
                  (and
                     (INV_REC_f__2_PRE m$2_0_old_1 n$2_0_old_1)
                     or.cond$2_0_1)
                  (INV_REC_f__2_PRE sub$2_0_1 1)))))))
(rule
   (let
      ((m$2_0_1 m$2_0_old_1)
       (n$2_0_1 n$2_0_old_1))
      (let
         ((cmp$2_0_1 (> m$2_0_1 0))
          (cmp1$2_0_1 (= n$2_0_1 0)))
         (let
            ((or.cond$2_0_1 (and
                                cmp$2_0_1
                                cmp1$2_0_1)))
            (let
               ((sub$2_0_1 (- m$2_0_1 1)))
               (let
                  ((r.1$2_0_1 call$2_0_1))
                  (let
                     ((result$2_1 r.1$2_0_1))
                     (=>
                        (and
                           (INV_REC_f__2_PRE m$2_0_old_1 n$2_0_old_1)
                           or.cond$2_0_1
                           (INV_REC_f__2 sub$2_0_1 1 call$2_0_1))
                        (INV_REC_f__2 m$2_0_old_1 n$2_0_old_1 result$2_1)))))))))
(rule
   (let
      ((m$2_0_1 m$2_0_old_1)
       (n$2_0_1 n$2_0_old_1))
      (let
         ((cmp$2_0_1 (> m$2_0_1 0))
          (cmp1$2_0_1 (= n$2_0_1 0)))
         (let
            ((or.cond$2_0_1 (and
                                cmp$2_0_1
                                cmp1$2_0_1)))
            (let
               ((cmp2$2_0_1 (= m$2_0_1 1)))
               (let
                  ((add$2_0_1 (+ n$2_0_1 1)))
                  (let
                     ((r.1$2_0_1 add$2_0_1))
                     (let
                        ((result$2_1 r.1$2_0_1))
                        (=>
                           (and
                              (INV_REC_f__2_PRE m$2_0_old_1 n$2_0_old_1)
                              (not or.cond$2_0_1)
                              cmp2$2_0_1)
                           (INV_REC_f__2 m$2_0_old_1 n$2_0_old_1 result$2_1))))))))))
(rule
   (let
      ((m$2_0_1 m$2_0_old_1)
       (n$2_0_1 n$2_0_old_1))
      (let
         ((cmp$2_0_1 (> m$2_0_1 0))
          (cmp1$2_0_1 (= n$2_0_1 0)))
         (let
            ((or.cond$2_0_1 (and
                                cmp$2_0_1
                                cmp1$2_0_1)))
            (let
               ((cmp2$2_0_1 (= m$2_0_1 1)))
               (let
                  ((sub5$2_0_1 (- n$2_0_1 1)))
                  (=>
                     (and
                        (INV_REC_f__2_PRE m$2_0_old_1 n$2_0_old_1)
                        (not or.cond$2_0_1)
                        (not cmp2$2_0_1))
                     (INV_REC_f__2_PRE m$2_0_1 sub5$2_0_1))))))))
(rule
   (let
      ((m$2_0_1 m$2_0_old_1)
       (n$2_0_1 n$2_0_old_1))
      (let
         ((cmp$2_0_1 (> m$2_0_1 0))
          (cmp1$2_0_1 (= n$2_0_1 0)))
         (let
            ((or.cond$2_0_1 (and
                                cmp$2_0_1
                                cmp1$2_0_1)))
            (let
               ((cmp2$2_0_1 (= m$2_0_1 1)))
               (let
                  ((sub5$2_0_1 (- n$2_0_1 1)))
                  (let
                     ((sub7$2_0_1 (- m$2_0_1 1)))
                     (=>
                        (and
                           (INV_REC_f__2_PRE m$2_0_old_1 n$2_0_old_1)
                           (not or.cond$2_0_1)
                           (not cmp2$2_0_1)
                           (INV_REC_f__2 m$2_0_1 sub5$2_0_1 call6$2_0_1))
                        (INV_REC_f__2_PRE sub7$2_0_1 call6$2_0_1)))))))))
(rule
   (let
      ((m$2_0_1 m$2_0_old_1)
       (n$2_0_1 n$2_0_old_1))
      (let
         ((cmp$2_0_1 (> m$2_0_1 0))
          (cmp1$2_0_1 (= n$2_0_1 0)))
         (let
            ((or.cond$2_0_1 (and
                                cmp$2_0_1
                                cmp1$2_0_1)))
            (let
               ((cmp2$2_0_1 (= m$2_0_1 1)))
               (let
                  ((sub5$2_0_1 (- n$2_0_1 1)))
                  (let
                     ((sub7$2_0_1 (- m$2_0_1 1)))
                     (let
                        ((r.1$2_0_1 call8$2_0_1))
                        (let
                           ((result$2_1 r.1$2_0_1))
                           (=>
                              (and
                                 (INV_REC_f__2_PRE m$2_0_old_1 n$2_0_old_1)
                                 (not or.cond$2_0_1)
                                 (not cmp2$2_0_1)
                                 (INV_REC_f__2 m$2_0_1 sub5$2_0_1 call6$2_0_1)
                                 (INV_REC_f__2 sub7$2_0_1 call6$2_0_1 call8$2_0_1))
                              (INV_REC_f__2 m$2_0_old_1 n$2_0_old_1 result$2_1)))))))))))
(query
   END_QUERY
   :print-certificate
   true)
