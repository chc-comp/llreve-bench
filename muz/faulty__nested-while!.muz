;; Produced by llreve (commit dc2abeaa50d9197d51fa4223b58154246b164df0)
;; See https://formal.iti.kit.edu/reve and https://github.com/mattulbrich/llreve/
;; (c) 2018 KIT

(set-option
   :int-real-coercions
   false)
(declare-var
   add$1_0_old_1
   Int)
(declare-var
   add$2_0_old_1
   Int)
(declare-var
   g$1_0_old_1
   Int)
(declare-var
   g$2_0_old_1
   Int)
(declare-var
   g.addr.0$1_0_old_1
   Int)
(declare-var
   g.addr.0$2_0_old_1
   Int)
(declare-var
   g.addr.1$2_0_old_1
   Int)
(declare-var
   g.addr.1.sink$1_0_old_1
   Int)
(declare-var
   i.0$1_0_old_1
   Int)
(declare-var
   i.0$2_0_old_1
   Int)
(declare-var
   x$1_0_old_1
   Int)
(declare-var
   x$2_0_old_1
   Int)
(declare-var
   x.addr.0$1_0_old_1
   Int)
(declare-var
   x.addr.0$2_0_old_1
   Int)
(declare-var
   x.addr.1$1_0_old_1
   Int)
(declare-var
   x.addr.1$2_0_old_1
   Int)
(declare-rel
   END_QUERY
   ())
(define-fun
   IN_INV
   ((x$1_0 Int)
    (g$1_0 Int)
    (x$2_0 Int)
    (g$2_0 Int))
   Bool
   (and
      (= x$1_0 x$2_0)
      (= g$1_0 g$2_0)))
(define-fun
   OUT_INV
   ((result$1 Int)
    (result$2 Int))
   Bool
   (= result$1 result$2))
; :annot (INV_MAIN_23 add$1_0 g.addr.1.sink$1_0 x.addr.1$1_0 add$2_0 g.addr.1$2_0 x.addr.1$2_0)
(declare-rel
   INV_MAIN_23
   (Int
    Int
    Int
    Int
    Int
    Int))
; :annot (INV_MAIN_42 g.addr.0$1_0 i.0$1_0 x.addr.0$1_0 g.addr.0$2_0 i.0$2_0 x.addr.0$2_0)
(declare-rel
   INV_MAIN_42
   (Int
    Int
    Int
    Int
    Int
    Int))
(rule
   (let
      ((x$1_0_1 x$1_0_old_1)
       (g$1_0_1 g$1_0_old_1))
      (let
         ((i.0$1_0_1 0)
          (g.addr.0$1_0_1 g$1_0_1)
          (x.addr.0$1_0_1 x$1_0_1)
          (x$2_0_1 x$2_0_old_1)
          (g$2_0_1 g$2_0_old_1))
         (let
            ((i.0$2_0_1 0)
             (g.addr.0$2_0_1 g$2_0_1)
             (x.addr.0$2_0_1 x$2_0_1))
            (=>
               (IN_INV x$1_0_old_1 g$1_0_old_1 x$2_0_old_1 g$2_0_old_1)
               (INV_MAIN_42 g.addr.0$1_0_1 i.0$1_0_1 x.addr.0$1_0_1 g.addr.0$2_0_1 i.0$2_0_1 x.addr.0$2_0_1))))))
(rule
   (let
      ((add$1_0_1 add$1_0_old_1)
       (g.addr.1.sink$1_0_1 g.addr.1.sink$1_0_old_1)
       (x.addr.1$1_0_1 x.addr.1$1_0_old_1))
      (let
         ((add11$1_0_1 (+ g.addr.1.sink$1_0_1 1))
          (cmp4$1_0_1 (< x.addr.1$1_0_1 add$1_0_1)))
         (let
            ((add9$1_0_1 (+ x.addr.1$1_0_1 2)))
            (let
               ((sub10$1_0_1 (- add9$1_0_1 1)))
               (let
                  ((g.addr.1.sink$1_0_2 add11$1_0_1)
                   (x.addr.1$1_0_2 sub10$1_0_1)
                   (add$2_0_1 add$2_0_old_1)
                   (g.addr.1$2_0_1 g.addr.1$2_0_old_1)
                   (x.addr.1$2_0_1 x.addr.1$2_0_old_1))
                  (let
                     ((cmp3$2_0_1 (< x.addr.1$2_0_1 add$2_0_1)))
                     (let
                        ((add8$2_0_1 (+ x.addr.1$2_0_1 1))
                         (add9$2_0_1 (+ g.addr.1$2_0_1 2)))
                        (let
                           ((g.addr.1$2_0_2 add9$2_0_1)
                            (x.addr.1$2_0_2 add8$2_0_1))
                           (=>
                              (and
                                 (INV_MAIN_23 add$1_0_old_1 g.addr.1.sink$1_0_old_1 x.addr.1$1_0_old_1 add$2_0_old_1 g.addr.1$2_0_old_1 x.addr.1$2_0_old_1)
                                 cmp4$1_0_1
                                 cmp3$2_0_1)
                              (INV_MAIN_23 add$1_0_1 g.addr.1.sink$1_0_2 x.addr.1$1_0_2 add$2_0_1 g.addr.1$2_0_2 x.addr.1$2_0_2)))))))))))
(rule
   (let
      ((add$1_0_1 add$1_0_old_1)
       (g.addr.1.sink$1_0_1 g.addr.1.sink$1_0_old_1)
       (x.addr.1$1_0_1 x.addr.1$1_0_old_1))
      (let
         ((add11$1_0_1 (+ g.addr.1.sink$1_0_1 1))
          (cmp4$1_0_1 (< x.addr.1$1_0_1 add$1_0_1)))
         (let
            ((add9$1_0_1 (+ x.addr.1$1_0_1 2)))
            (let
               ((sub10$1_0_1 (- add9$1_0_1 1)))
               (let
                  ((g.addr.1.sink$1_0_2 add11$1_0_1)
                   (x.addr.1$1_0_2 sub10$1_0_1))
                  (=>
                     (and
                        (INV_MAIN_23 add$1_0_old_1 g.addr.1.sink$1_0_old_1 x.addr.1$1_0_old_1 add$2_0_old_1 g.addr.1$2_0_old_1 x.addr.1$2_0_old_1)
                        cmp4$1_0_1
                        (let
                           ((add$2_0_1 add$2_0_old_1)
                            (g.addr.1$2_0_1 g.addr.1$2_0_old_1)
                            (x.addr.1$2_0_1 x.addr.1$2_0_old_1))
                           (let
                              ((cmp3$2_0_1 (< x.addr.1$2_0_1 add$2_0_1)))
                              (=>
                                 cmp3$2_0_1
                                 (let
                                    ((add8$2_0_1 (+ x.addr.1$2_0_1 1))
                                     (add9$2_0_1 (+ g.addr.1$2_0_1 2)))
                                    (let
                                       ((g.addr.1$2_0_2 add9$2_0_1)
                                        (x.addr.1$2_0_2 add8$2_0_1))
                                       false))))))
                     (INV_MAIN_23 add$1_0_1 g.addr.1.sink$1_0_2 x.addr.1$1_0_2 add$2_0_old_1 g.addr.1$2_0_old_1 x.addr.1$2_0_old_1))))))))
(rule
   (let
      ((add$2_0_1 add$2_0_old_1)
       (g.addr.1$2_0_1 g.addr.1$2_0_old_1)
       (x.addr.1$2_0_1 x.addr.1$2_0_old_1))
      (let
         ((cmp3$2_0_1 (< x.addr.1$2_0_1 add$2_0_1)))
         (let
            ((add8$2_0_1 (+ x.addr.1$2_0_1 1))
             (add9$2_0_1 (+ g.addr.1$2_0_1 2)))
            (let
               ((g.addr.1$2_0_2 add9$2_0_1)
                (x.addr.1$2_0_2 add8$2_0_1))
               (=>
                  (and
                     (INV_MAIN_23 add$1_0_old_1 g.addr.1.sink$1_0_old_1 x.addr.1$1_0_old_1 add$2_0_old_1 g.addr.1$2_0_old_1 x.addr.1$2_0_old_1)
                     cmp3$2_0_1
                     (let
                        ((add$1_0_1 add$1_0_old_1)
                         (g.addr.1.sink$1_0_1 g.addr.1.sink$1_0_old_1)
                         (x.addr.1$1_0_1 x.addr.1$1_0_old_1))
                        (let
                           ((add11$1_0_1 (+ g.addr.1.sink$1_0_1 1))
                            (cmp4$1_0_1 (< x.addr.1$1_0_1 add$1_0_1)))
                           (=>
                              cmp4$1_0_1
                              (let
                                 ((add9$1_0_1 (+ x.addr.1$1_0_1 2)))
                                 (let
                                    ((sub10$1_0_1 (- add9$1_0_1 1)))
                                    (let
                                       ((g.addr.1.sink$1_0_2 add11$1_0_1)
                                        (x.addr.1$1_0_2 sub10$1_0_1))
                                       false)))))))
                  (INV_MAIN_23 add$1_0_old_1 g.addr.1.sink$1_0_old_1 x.addr.1$1_0_old_1 add$2_0_1 g.addr.1$2_0_2 x.addr.1$2_0_2)))))))
(rule
   (let
      ((add$1_0_1 add$1_0_old_1)
       (g.addr.1.sink$1_0_1 g.addr.1.sink$1_0_old_1)
       (x.addr.1$1_0_1 x.addr.1$1_0_old_1))
      (let
         ((add11$1_0_1 (+ g.addr.1.sink$1_0_1 1))
          (cmp4$1_0_1 (< x.addr.1$1_0_1 add$1_0_1)))
         (let
            ((i.0$1_0_1 add$1_0_1)
             (g.addr.0$1_0_1 add11$1_0_1)
             (x.addr.0$1_0_1 x.addr.1$1_0_1)
             (add$2_0_1 add$2_0_old_1)
             (g.addr.1$2_0_1 g.addr.1$2_0_old_1)
             (x.addr.1$2_0_1 x.addr.1$2_0_old_1))
            (let
               ((cmp3$2_0_1 (< x.addr.1$2_0_1 add$2_0_1)))
               (let
                  ((i.0$2_0_1 add$2_0_1)
                   (g.addr.0$2_0_1 g.addr.1$2_0_1)
                   (x.addr.0$2_0_1 x.addr.1$2_0_1))
                  (=>
                     (and
                        (INV_MAIN_23 add$1_0_old_1 g.addr.1.sink$1_0_old_1 x.addr.1$1_0_old_1 add$2_0_old_1 g.addr.1$2_0_old_1 x.addr.1$2_0_old_1)
                        (not cmp4$1_0_1)
                        (not cmp3$2_0_1))
                     (INV_MAIN_42 g.addr.0$1_0_1 i.0$1_0_1 x.addr.0$1_0_1 g.addr.0$2_0_1 i.0$2_0_1 x.addr.0$2_0_1))))))))
(rule
   (let
      ((g.addr.0$1_0_1 g.addr.0$1_0_old_1)
       (i.0$1_0_1 i.0$1_0_old_1)
       (x.addr.0$1_0_1 x.addr.0$1_0_old_1))
      (let
         ((cmp$1_0_1 (< i.0$1_0_1 x.addr.0$1_0_1)))
         (let
            ((result$1_1 g.addr.0$1_0_1)
             (g.addr.0$2_0_1 g.addr.0$2_0_old_1)
             (i.0$2_0_1 i.0$2_0_old_1)
             (x.addr.0$2_0_1 x.addr.0$2_0_old_1))
            (let
               ((cmp$2_0_1 (< i.0$2_0_1 x.addr.0$2_0_1)))
               (=>
                  (and
                     (INV_MAIN_42 g.addr.0$1_0_old_1 i.0$1_0_old_1 x.addr.0$1_0_old_1 g.addr.0$2_0_old_1 i.0$2_0_old_1 x.addr.0$2_0_old_1)
                     (not cmp$1_0_1)
                     cmp$2_0_1)
                  END_QUERY))))))
(rule
   (let
      ((g.addr.0$1_0_1 g.addr.0$1_0_old_1)
       (i.0$1_0_1 i.0$1_0_old_1)
       (x.addr.0$1_0_1 x.addr.0$1_0_old_1))
      (let
         ((cmp$1_0_1 (< i.0$1_0_1 x.addr.0$1_0_1)))
         (let
            ((add$1_0_1 (+ i.0$1_0_1 1))
             (sub$1_0_1 (- g.addr.0$1_0_1 2)))
            (let
               ((g.addr.1.sink$1_0_1 sub$1_0_1)
                (x.addr.1$1_0_1 x.addr.0$1_0_1)
                (g.addr.0$2_0_1 g.addr.0$2_0_old_1)
                (i.0$2_0_1 i.0$2_0_old_1)
                (x.addr.0$2_0_1 x.addr.0$2_0_old_1))
               (let
                  ((cmp$2_0_1 (< i.0$2_0_1 x.addr.0$2_0_1)))
                  (=>
                     (and
                        (INV_MAIN_42 g.addr.0$1_0_old_1 i.0$1_0_old_1 x.addr.0$1_0_old_1 g.addr.0$2_0_old_1 i.0$2_0_old_1 x.addr.0$2_0_old_1)
                        cmp$1_0_1
                        (not cmp$2_0_1))
                     END_QUERY)))))))
(rule
   (let
      ((g.addr.0$1_0_1 g.addr.0$1_0_old_1)
       (i.0$1_0_1 i.0$1_0_old_1)
       (x.addr.0$1_0_1 x.addr.0$1_0_old_1))
      (let
         ((cmp$1_0_1 (< i.0$1_0_1 x.addr.0$1_0_1)))
         (let
            ((result$1_1 g.addr.0$1_0_1)
             (g.addr.0$2_0_1 g.addr.0$2_0_old_1)
             (i.0$2_0_1 i.0$2_0_old_1)
             (x.addr.0$2_0_1 x.addr.0$2_0_old_1))
            (let
               ((cmp$2_0_1 (< i.0$2_0_1 x.addr.0$2_0_1)))
               (let
                  ((result$2_1 g.addr.0$2_0_1))
                  (=>
                     (and
                        (INV_MAIN_42 g.addr.0$1_0_old_1 i.0$1_0_old_1 x.addr.0$1_0_old_1 g.addr.0$2_0_old_1 i.0$2_0_old_1 x.addr.0$2_0_old_1)
                        (not cmp$1_0_1)
                        (not cmp$2_0_1)
                        (not (OUT_INV result$1_1 result$2_1)))
                     END_QUERY)))))))
(rule
   (let
      ((g.addr.0$1_0_1 g.addr.0$1_0_old_1)
       (i.0$1_0_1 i.0$1_0_old_1)
       (x.addr.0$1_0_1 x.addr.0$1_0_old_1))
      (let
         ((cmp$1_0_1 (< i.0$1_0_1 x.addr.0$1_0_1)))
         (let
            ((add$1_0_1 (+ i.0$1_0_1 1))
             (sub$1_0_1 (- g.addr.0$1_0_1 2)))
            (let
               ((g.addr.1.sink$1_0_1 sub$1_0_1)
                (x.addr.1$1_0_1 x.addr.0$1_0_1)
                (g.addr.0$2_0_1 g.addr.0$2_0_old_1)
                (i.0$2_0_1 i.0$2_0_old_1)
                (x.addr.0$2_0_1 x.addr.0$2_0_old_1))
               (let
                  ((cmp$2_0_1 (< i.0$2_0_1 x.addr.0$2_0_1)))
                  (let
                     ((add$2_0_1 (+ i.0$2_0_1 1))
                      (sub$2_0_1 (- g.addr.0$2_0_1 2)))
                     (let
                        ((g.addr.1$2_0_1 sub$2_0_1)
                         (x.addr.1$2_0_1 x.addr.0$2_0_1))
                        (=>
                           (and
                              (INV_MAIN_42 g.addr.0$1_0_old_1 i.0$1_0_old_1 x.addr.0$1_0_old_1 g.addr.0$2_0_old_1 i.0$2_0_old_1 x.addr.0$2_0_old_1)
                              cmp$1_0_1
                              cmp$2_0_1)
                           (INV_MAIN_23 add$1_0_1 g.addr.1.sink$1_0_1 x.addr.1$1_0_1 add$2_0_1 g.addr.1$2_0_1 x.addr.1$2_0_1))))))))))
(query
   END_QUERY
   :print-certificate
   true)
