;; Produced by llreve (commit dc2abeaa50d9197d51fa4223b58154246b164df0)
;; See https://formal.iti.kit.edu/reve and https://github.com/mattulbrich/llreve/
;; (c) 2018 KIT

(set-option
   :int-real-coercions
   false)
(declare-var
   call$1_0_1
   Int)
(declare-var
   call$2_0_1
   Int)
(declare-var
   i$1_0_old_1
   Int)
(declare-var
   i$2_0_old_1
   Int)
(declare-var
   j$1_0_old_1
   Int)
(declare-var
   j$2_0_old_1
   Int)
(declare-rel
   END_QUERY
   ())
(define-fun
   IN_INV
   ((i$1_0 Int)
    (j$1_0 Int)
    (i$2_0 Int)
    (j$2_0 Int))
   Bool
   (and
      (= i$1_0 i$2_0)
      (= j$1_0 j$2_0)))
(define-fun
   OUT_INV
   ((result$1 Int)
    (result$2 Int))
   Bool
   (= result$1 result$2))
(declare-rel
   INV_REC_f^f
   (Int
    Int
    Int
    Int
    Int
    Int))
(declare-rel
   INV_REC_f^f_PRE
   (Int
    Int
    Int
    Int))
(declare-rel
   INV_REC_f__1
   (Int
    Int
    Int))
(declare-rel
   INV_REC_f__1_PRE
   (Int
    Int))
(declare-rel
   INV_REC_f__2
   (Int
    Int
    Int))
(declare-rel
   INV_REC_f__2_PRE
   (Int
    Int))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((r.0$1_0_1 j$1_0_1))
            (let
               ((result$1_1 r.0$1_0_1)
                (i$2_0_1 i$2_0_old_1)
                (j$2_0_1 j$2_0_old_1))
               (let
                  ((r.1$2_0_1 j$2_0_1))
                  (let
                     ((result$2_1 r.1$2_0_1))
                     (=>
                        (and
                           (IN_INV i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1)
                           cmp$1_0_1
                           (= i$2_0_1 0)
                           (not (OUT_INV result$1_1 result$2_1)))
                        END_QUERY))))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((r.0$1_0_1 j$1_0_1))
            (let
               ((result$1_1 r.0$1_0_1)
                (i$2_0_1 i$2_0_old_1)
                (j$2_0_1 j$2_0_old_1))
               (let
                  ((add$2_0_1 (+ j$2_0_1 1)))
                  (let
                     ((r.1$2_0_1 add$2_0_1))
                     (let
                        ((result$2_1 r.1$2_0_1))
                        (=>
                           (and
                              (IN_INV i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1)
                              cmp$1_0_1
                              (= i$2_0_1 1)
                              (not (OUT_INV result$1_1 result$2_1)))
                           END_QUERY)))))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((r.0$1_0_1 j$1_0_1))
            (let
               ((result$1_1 r.0$1_0_1)
                (i$2_0_1 i$2_0_old_1)
                (j$2_0_1 j$2_0_old_1))
               (let
                  ((sub$2_0_1 (- i$2_0_1 1))
                   (add4$2_0_1 (+ j$2_0_1 1)))
                  (=>
                     (and
                        (IN_INV i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1)
                        cmp$1_0_1
                        (distinct 0 1 i$2_0_1))
                     (INV_REC_f__2_PRE sub$2_0_1 add4$2_0_1))))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((r.0$1_0_1 j$1_0_1))
            (let
               ((result$1_1 r.0$1_0_1)
                (i$2_0_1 i$2_0_old_1)
                (j$2_0_1 j$2_0_old_1))
               (let
                  ((sub$2_0_1 (- i$2_0_1 1))
                   (add4$2_0_1 (+ j$2_0_1 1)))
                  (let
                     ((r.1$2_0_1 call$2_0_1))
                     (let
                        ((result$2_1 r.1$2_0_1))
                        (=>
                           (and
                              (IN_INV i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1)
                              cmp$1_0_1
                              (distinct 0 1 i$2_0_1)
                              (INV_REC_f__2 sub$2_0_1 add4$2_0_1 call$2_0_1)
                              (not (OUT_INV result$1_1 result$2_1)))
                           END_QUERY)))))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((sub$1_0_1 (- i$1_0_1 1))
             (add$1_0_1 (+ j$1_0_1 1))
             (i$2_0_1 i$2_0_old_1)
             (j$2_0_1 j$2_0_old_1))
            (let
               ((r.1$2_0_1 j$2_0_1))
               (let
                  ((result$2_1 r.1$2_0_1))
                  (=>
                     (and
                        (IN_INV i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1)
                        (not cmp$1_0_1)
                        (= i$2_0_1 0))
                     (INV_REC_f__1_PRE sub$1_0_1 add$1_0_1))))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((sub$1_0_1 (- i$1_0_1 1))
             (add$1_0_1 (+ j$1_0_1 1))
             (i$2_0_1 i$2_0_old_1)
             (j$2_0_1 j$2_0_old_1))
            (let
               ((r.1$2_0_1 j$2_0_1))
               (let
                  ((result$2_1 r.1$2_0_1))
                  (let
                     ((r.0$1_0_1 call$1_0_1))
                     (let
                        ((result$1_1 r.0$1_0_1))
                        (=>
                           (and
                              (IN_INV i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1)
                              (not cmp$1_0_1)
                              (= i$2_0_1 0)
                              (INV_REC_f__1 sub$1_0_1 add$1_0_1 call$1_0_1)
                              (not (OUT_INV result$1_1 result$2_1)))
                           END_QUERY)))))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((sub$1_0_1 (- i$1_0_1 1))
             (add$1_0_1 (+ j$1_0_1 1))
             (i$2_0_1 i$2_0_old_1)
             (j$2_0_1 j$2_0_old_1))
            (let
               ((add$2_0_1 (+ j$2_0_1 1)))
               (let
                  ((r.1$2_0_1 add$2_0_1))
                  (let
                     ((result$2_1 r.1$2_0_1))
                     (=>
                        (and
                           (IN_INV i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1)
                           (not cmp$1_0_1)
                           (= i$2_0_1 1))
                        (INV_REC_f__1_PRE sub$1_0_1 add$1_0_1)))))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((sub$1_0_1 (- i$1_0_1 1))
             (add$1_0_1 (+ j$1_0_1 1))
             (i$2_0_1 i$2_0_old_1)
             (j$2_0_1 j$2_0_old_1))
            (let
               ((add$2_0_1 (+ j$2_0_1 1)))
               (let
                  ((r.1$2_0_1 add$2_0_1))
                  (let
                     ((result$2_1 r.1$2_0_1))
                     (let
                        ((r.0$1_0_1 call$1_0_1))
                        (let
                           ((result$1_1 r.0$1_0_1))
                           (=>
                              (and
                                 (IN_INV i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1)
                                 (not cmp$1_0_1)
                                 (= i$2_0_1 1)
                                 (INV_REC_f__1 sub$1_0_1 add$1_0_1 call$1_0_1)
                                 (not (OUT_INV result$1_1 result$2_1)))
                              END_QUERY))))))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((sub$1_0_1 (- i$1_0_1 1))
             (add$1_0_1 (+ j$1_0_1 1))
             (i$2_0_1 i$2_0_old_1)
             (j$2_0_1 j$2_0_old_1))
            (let
               ((sub$2_0_1 (- i$2_0_1 1))
                (add4$2_0_1 (+ j$2_0_1 1)))
               (=>
                  (and
                     (IN_INV i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1)
                     (not cmp$1_0_1)
                     (distinct 0 1 i$2_0_1))
                  (INV_REC_f^f_PRE sub$1_0_1 add$1_0_1 sub$2_0_1 add4$2_0_1)))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((sub$1_0_1 (- i$1_0_1 1))
             (add$1_0_1 (+ j$1_0_1 1))
             (i$2_0_1 i$2_0_old_1)
             (j$2_0_1 j$2_0_old_1))
            (let
               ((sub$2_0_1 (- i$2_0_1 1))
                (add4$2_0_1 (+ j$2_0_1 1)))
               (let
                  ((r.0$1_0_1 call$1_0_1))
                  (let
                     ((result$1_1 r.0$1_0_1)
                      (r.1$2_0_1 call$2_0_1))
                     (let
                        ((result$2_1 r.1$2_0_1))
                        (=>
                           (and
                              (IN_INV i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1)
                              (not cmp$1_0_1)
                              (distinct 0 1 i$2_0_1)
                              (INV_REC_f^f sub$1_0_1 add$1_0_1 sub$2_0_1 add4$2_0_1 call$1_0_1 call$2_0_1)
                              (not (OUT_INV result$1_1 result$2_1)))
                           END_QUERY)))))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((r.0$1_0_1 j$1_0_1))
            (let
               ((result$1_1 r.0$1_0_1)
                (i$2_0_1 i$2_0_old_1)
                (j$2_0_1 j$2_0_old_1))
               (let
                  ((r.1$2_0_1 j$2_0_1))
                  (let
                     ((result$2_1 r.1$2_0_1))
                     (=>
                        (and
                           (INV_REC_f^f_PRE i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1)
                           cmp$1_0_1
                           (= i$2_0_1 0))
                        (INV_REC_f^f i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1 result$1_1 result$2_1)))))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((r.0$1_0_1 j$1_0_1))
            (let
               ((result$1_1 r.0$1_0_1)
                (i$2_0_1 i$2_0_old_1)
                (j$2_0_1 j$2_0_old_1))
               (let
                  ((add$2_0_1 (+ j$2_0_1 1)))
                  (let
                     ((r.1$2_0_1 add$2_0_1))
                     (let
                        ((result$2_1 r.1$2_0_1))
                        (=>
                           (and
                              (INV_REC_f^f_PRE i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1)
                              cmp$1_0_1
                              (= i$2_0_1 1))
                           (INV_REC_f^f i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1 result$1_1 result$2_1))))))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((r.0$1_0_1 j$1_0_1))
            (let
               ((result$1_1 r.0$1_0_1)
                (i$2_0_1 i$2_0_old_1)
                (j$2_0_1 j$2_0_old_1))
               (let
                  ((sub$2_0_1 (- i$2_0_1 1))
                   (add4$2_0_1 (+ j$2_0_1 1)))
                  (=>
                     (and
                        (INV_REC_f^f_PRE i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1)
                        cmp$1_0_1
                        (distinct 0 1 i$2_0_1))
                     (INV_REC_f__2_PRE sub$2_0_1 add4$2_0_1))))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((r.0$1_0_1 j$1_0_1))
            (let
               ((result$1_1 r.0$1_0_1)
                (i$2_0_1 i$2_0_old_1)
                (j$2_0_1 j$2_0_old_1))
               (let
                  ((sub$2_0_1 (- i$2_0_1 1))
                   (add4$2_0_1 (+ j$2_0_1 1)))
                  (let
                     ((r.1$2_0_1 call$2_0_1))
                     (let
                        ((result$2_1 r.1$2_0_1))
                        (=>
                           (and
                              (INV_REC_f^f_PRE i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1)
                              cmp$1_0_1
                              (distinct 0 1 i$2_0_1)
                              (INV_REC_f__2 sub$2_0_1 add4$2_0_1 call$2_0_1))
                           (INV_REC_f^f i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1 result$1_1 result$2_1))))))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((sub$1_0_1 (- i$1_0_1 1))
             (add$1_0_1 (+ j$1_0_1 1))
             (i$2_0_1 i$2_0_old_1)
             (j$2_0_1 j$2_0_old_1))
            (let
               ((r.1$2_0_1 j$2_0_1))
               (let
                  ((result$2_1 r.1$2_0_1))
                  (=>
                     (and
                        (INV_REC_f^f_PRE i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1)
                        (not cmp$1_0_1)
                        (= i$2_0_1 0))
                     (INV_REC_f__1_PRE sub$1_0_1 add$1_0_1))))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((sub$1_0_1 (- i$1_0_1 1))
             (add$1_0_1 (+ j$1_0_1 1))
             (i$2_0_1 i$2_0_old_1)
             (j$2_0_1 j$2_0_old_1))
            (let
               ((r.1$2_0_1 j$2_0_1))
               (let
                  ((result$2_1 r.1$2_0_1))
                  (let
                     ((r.0$1_0_1 call$1_0_1))
                     (let
                        ((result$1_1 r.0$1_0_1))
                        (=>
                           (and
                              (INV_REC_f^f_PRE i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1)
                              (not cmp$1_0_1)
                              (= i$2_0_1 0)
                              (INV_REC_f__1 sub$1_0_1 add$1_0_1 call$1_0_1))
                           (INV_REC_f^f i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1 result$1_1 result$2_1))))))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((sub$1_0_1 (- i$1_0_1 1))
             (add$1_0_1 (+ j$1_0_1 1))
             (i$2_0_1 i$2_0_old_1)
             (j$2_0_1 j$2_0_old_1))
            (let
               ((add$2_0_1 (+ j$2_0_1 1)))
               (let
                  ((r.1$2_0_1 add$2_0_1))
                  (let
                     ((result$2_1 r.1$2_0_1))
                     (=>
                        (and
                           (INV_REC_f^f_PRE i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1)
                           (not cmp$1_0_1)
                           (= i$2_0_1 1))
                        (INV_REC_f__1_PRE sub$1_0_1 add$1_0_1)))))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((sub$1_0_1 (- i$1_0_1 1))
             (add$1_0_1 (+ j$1_0_1 1))
             (i$2_0_1 i$2_0_old_1)
             (j$2_0_1 j$2_0_old_1))
            (let
               ((add$2_0_1 (+ j$2_0_1 1)))
               (let
                  ((r.1$2_0_1 add$2_0_1))
                  (let
                     ((result$2_1 r.1$2_0_1))
                     (let
                        ((r.0$1_0_1 call$1_0_1))
                        (let
                           ((result$1_1 r.0$1_0_1))
                           (=>
                              (and
                                 (INV_REC_f^f_PRE i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1)
                                 (not cmp$1_0_1)
                                 (= i$2_0_1 1)
                                 (INV_REC_f__1 sub$1_0_1 add$1_0_1 call$1_0_1))
                              (INV_REC_f^f i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1 result$1_1 result$2_1)))))))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((sub$1_0_1 (- i$1_0_1 1))
             (add$1_0_1 (+ j$1_0_1 1))
             (i$2_0_1 i$2_0_old_1)
             (j$2_0_1 j$2_0_old_1))
            (let
               ((sub$2_0_1 (- i$2_0_1 1))
                (add4$2_0_1 (+ j$2_0_1 1)))
               (=>
                  (and
                     (INV_REC_f^f_PRE i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1)
                     (not cmp$1_0_1)
                     (distinct 0 1 i$2_0_1))
                  (INV_REC_f^f_PRE sub$1_0_1 add$1_0_1 sub$2_0_1 add4$2_0_1)))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((sub$1_0_1 (- i$1_0_1 1))
             (add$1_0_1 (+ j$1_0_1 1))
             (i$2_0_1 i$2_0_old_1)
             (j$2_0_1 j$2_0_old_1))
            (let
               ((sub$2_0_1 (- i$2_0_1 1))
                (add4$2_0_1 (+ j$2_0_1 1)))
               (let
                  ((r.0$1_0_1 call$1_0_1))
                  (let
                     ((result$1_1 r.0$1_0_1)
                      (r.1$2_0_1 call$2_0_1))
                     (let
                        ((result$2_1 r.1$2_0_1))
                        (=>
                           (and
                              (INV_REC_f^f_PRE i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1)
                              (not cmp$1_0_1)
                              (distinct 0 1 i$2_0_1)
                              (INV_REC_f^f sub$1_0_1 add$1_0_1 sub$2_0_1 add4$2_0_1 call$1_0_1 call$2_0_1))
                           (INV_REC_f^f i$1_0_old_1 j$1_0_old_1 i$2_0_old_1 j$2_0_old_1 result$1_1 result$2_1))))))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((r.0$1_0_1 j$1_0_1))
            (let
               ((result$1_1 r.0$1_0_1))
               (=>
                  (and
                     (INV_REC_f__1_PRE i$1_0_old_1 j$1_0_old_1)
                     cmp$1_0_1)
                  (INV_REC_f__1 i$1_0_old_1 j$1_0_old_1 result$1_1)))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((sub$1_0_1 (- i$1_0_1 1))
             (add$1_0_1 (+ j$1_0_1 1)))
            (=>
               (and
                  (INV_REC_f__1_PRE i$1_0_old_1 j$1_0_old_1)
                  (not cmp$1_0_1))
               (INV_REC_f__1_PRE sub$1_0_1 add$1_0_1))))))
(rule
   (let
      ((i$1_0_1 i$1_0_old_1))
      (let
         ((j$1_0_1 j$1_0_old_1)
          (cmp$1_0_1 (= i$1_0_1 0)))
         (let
            ((sub$1_0_1 (- i$1_0_1 1))
             (add$1_0_1 (+ j$1_0_1 1)))
            (let
               ((r.0$1_0_1 call$1_0_1))
               (let
                  ((result$1_1 r.0$1_0_1))
                  (=>
                     (and
                        (INV_REC_f__1_PRE i$1_0_old_1 j$1_0_old_1)
                        (not cmp$1_0_1)
                        (INV_REC_f__1 sub$1_0_1 add$1_0_1 call$1_0_1))
                     (INV_REC_f__1 i$1_0_old_1 j$1_0_old_1 result$1_1))))))))
(rule
   (let
      ((i$2_0_1 i$2_0_old_1)
       (j$2_0_1 j$2_0_old_1))
      (let
         ((r.1$2_0_1 j$2_0_1))
         (let
            ((result$2_1 r.1$2_0_1))
            (=>
               (and
                  (INV_REC_f__2_PRE i$2_0_old_1 j$2_0_old_1)
                  (= i$2_0_1 0))
               (INV_REC_f__2 i$2_0_old_1 j$2_0_old_1 result$2_1))))))
(rule
   (let
      ((i$2_0_1 i$2_0_old_1)
       (j$2_0_1 j$2_0_old_1))
      (let
         ((add$2_0_1 (+ j$2_0_1 1)))
         (let
            ((r.1$2_0_1 add$2_0_1))
            (let
               ((result$2_1 r.1$2_0_1))
               (=>
                  (and
                     (INV_REC_f__2_PRE i$2_0_old_1 j$2_0_old_1)
                     (= i$2_0_1 1))
                  (INV_REC_f__2 i$2_0_old_1 j$2_0_old_1 result$2_1)))))))
(rule
   (let
      ((i$2_0_1 i$2_0_old_1)
       (j$2_0_1 j$2_0_old_1))
      (let
         ((sub$2_0_1 (- i$2_0_1 1))
          (add4$2_0_1 (+ j$2_0_1 1)))
         (=>
            (and
               (INV_REC_f__2_PRE i$2_0_old_1 j$2_0_old_1)
               (distinct 0 1 i$2_0_1))
            (INV_REC_f__2_PRE sub$2_0_1 add4$2_0_1)))))
(rule
   (let
      ((i$2_0_1 i$2_0_old_1)
       (j$2_0_1 j$2_0_old_1))
      (let
         ((sub$2_0_1 (- i$2_0_1 1))
          (add4$2_0_1 (+ j$2_0_1 1)))
         (let
            ((r.1$2_0_1 call$2_0_1))
            (let
               ((result$2_1 r.1$2_0_1))
               (=>
                  (and
                     (INV_REC_f__2_PRE i$2_0_old_1 j$2_0_old_1)
                     (distinct 0 1 i$2_0_1)
                     (INV_REC_f__2 sub$2_0_1 add4$2_0_1 call$2_0_1))
                  (INV_REC_f__2 i$2_0_old_1 j$2_0_old_1 result$2_1)))))))
(query
   END_QUERY
   :print-certificate
   true)
