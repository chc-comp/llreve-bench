;; Produced by llreve (commit dc2abeaa50d9197d51fa4223b58154246b164df0)
;; See https://formal.iti.kit.edu/reve and https://github.com/mattulbrich/llreve/
;; (c) 2018 KIT

(set-option
   :int-real-coercions
   false)
(declare-var
   HEAP$1_old_1
   (Array Int Int))
(declare-var
   HEAP$2_old_1
   (Array Int Int))
(declare-var
   a.0$2_0_old_1
   Int)
(declare-var
   c$1_0_old_1
   Int)
(declare-var
   count$2_0_old_1
   Int)
(declare-var
   d.0$1_0_old_1
   Int)
(declare-var
   dec$2_0_old_1
   Int)
(declare-var
   dst$1_0_old_1
   Int)
(declare-var
   dst$2_0_old_1
   Int)
(declare-var
   n$1_0_old_1
   Int)
(declare-var
   n.addr.0$1_0_old_1
   Int)
(declare-var
   s$2_0_old_1
   Int)
(declare-rel
   END_QUERY
   ())
(define-fun
   IN_INV
   ((dst$1_0 Int)
    (c$1_0 Int)
    (n$1_0 Int)
    (HEAP$1 (Array Int Int))
    (dst$2_0 Int)
    (s$2_0 Int)
    (count$2_0 Int)
    (HEAP$2 (Array Int Int)))
   Bool
   (and
      (= dst$1_0 dst$2_0)
      (= c$1_0 s$2_0)
      (= n$1_0 count$2_0)
      (= HEAP$1 HEAP$2)))
(define-fun
   OUT_INV
   ((result$1 Int)
    (result$2 Int)
    (HEAP$1 (Array Int Int))
    (HEAP$2 (Array Int Int)))
   Bool
   (and
      (= result$1 result$2)
      (= HEAP$1 HEAP$2)))
; :annot (INV_MAIN_0 c$1_0 d.0$1_0 dst$1_0 n.addr.0$1_0 HEAP$1 a.0$2_0 dec$2_0 dst$2_0 s$2_0 HEAP$2)
(declare-rel
   INV_MAIN_0
   (Int
    Int
    Int
    Int
    (Array Int Int)
    Int
    Int
    Int
    Int
    (Array Int Int)))
(rule
   (let
      ((dst$1_0_1 dst$1_0_old_1)
       (c$1_0_1 c$1_0_old_1)
       (n$1_0_1 n$1_0_old_1))
      (let
         ((HEAP$1_1 HEAP$1_old_1)
          (cmp$1_0_1 (distinct n$1_0_1 0)))
         (let
            ((result$1_1 dst$1_0_1)
             (HEAP$1_res_1 HEAP$1_1)
             (dst$2_0_1 dst$2_0_old_1)
             (s$2_0_1 s$2_0_old_1)
             (count$2_0_1 count$2_0_old_1))
            (let
               ((HEAP$2_1 HEAP$2_old_1)
                (inc$2_0_1 (+ count$2_0_1 1)))
               (let
                  ((count.addr.0$2_0_1 inc$2_0_1))
                  (let
                     ((a.0$2_0_1 dst$2_0_1)
                      (dec$2_0_1 (+ count.addr.0$2_0_1 (- 1))))
                     (let
                        ((tobool$2_0_1 (distinct dec$2_0_1 0)))
                        (=>
                           (and
                              (IN_INV dst$1_0_old_1 c$1_0_old_1 n$1_0_old_1 HEAP$1_old_1 dst$2_0_old_1 s$2_0_old_1 count$2_0_old_1 HEAP$2_old_1)
                              (not cmp$1_0_1)
                              tobool$2_0_1)
                           END_QUERY)))))))))
(rule
   (let
      ((dst$1_0_1 dst$1_0_old_1)
       (c$1_0_1 c$1_0_old_1)
       (n$1_0_1 n$1_0_old_1))
      (let
         ((HEAP$1_1 HEAP$1_old_1)
          (cmp$1_0_1 (distinct n$1_0_1 0)))
         (let
            ((n.addr.0$1_0_1 n$1_0_1)
             (d.0$1_0_1 dst$1_0_1)
             (dst$2_0_1 dst$2_0_old_1)
             (s$2_0_1 s$2_0_old_1)
             (count$2_0_1 count$2_0_old_1))
            (let
               ((HEAP$2_1 HEAP$2_old_1)
                (inc$2_0_1 (+ count$2_0_1 1)))
               (let
                  ((count.addr.0$2_0_1 inc$2_0_1))
                  (let
                     ((a.0$2_0_1 dst$2_0_1)
                      (dec$2_0_1 (+ count.addr.0$2_0_1 (- 1))))
                     (let
                        ((tobool$2_0_1 (distinct dec$2_0_1 0)))
                        (=>
                           (and
                              (IN_INV dst$1_0_old_1 c$1_0_old_1 n$1_0_old_1 HEAP$1_old_1 dst$2_0_old_1 s$2_0_old_1 count$2_0_old_1 HEAP$2_old_1)
                              cmp$1_0_1
                              (not tobool$2_0_1))
                           END_QUERY)))))))))
(rule
   (let
      ((dst$1_0_1 dst$1_0_old_1)
       (c$1_0_1 c$1_0_old_1)
       (n$1_0_1 n$1_0_old_1))
      (let
         ((HEAP$1_1 HEAP$1_old_1)
          (cmp$1_0_1 (distinct n$1_0_1 0)))
         (let
            ((result$1_1 dst$1_0_1)
             (HEAP$1_res_1 HEAP$1_1)
             (dst$2_0_1 dst$2_0_old_1)
             (s$2_0_1 s$2_0_old_1)
             (count$2_0_1 count$2_0_old_1))
            (let
               ((HEAP$2_1 HEAP$2_old_1)
                (inc$2_0_1 (+ count$2_0_1 1)))
               (let
                  ((count.addr.0$2_0_1 inc$2_0_1))
                  (let
                     ((a.0$2_0_1 dst$2_0_1)
                      (dec$2_0_1 (+ count.addr.0$2_0_1 (- 1))))
                     (let
                        ((tobool$2_0_1 (distinct dec$2_0_1 0)))
                        (let
                           ((result$2_1 dst$2_0_1)
                            (HEAP$2_res_1 HEAP$2_1))
                           (=>
                              (and
                                 (IN_INV dst$1_0_old_1 c$1_0_old_1 n$1_0_old_1 HEAP$1_old_1 dst$2_0_old_1 s$2_0_old_1 count$2_0_old_1 HEAP$2_old_1)
                                 (not cmp$1_0_1)
                                 (not tobool$2_0_1)
                                 (not (OUT_INV result$1_1 result$2_1 HEAP$1_1 HEAP$2_1)))
                              END_QUERY))))))))))
(rule
   (let
      ((dst$1_0_1 dst$1_0_old_1)
       (c$1_0_1 c$1_0_old_1)
       (n$1_0_1 n$1_0_old_1))
      (let
         ((HEAP$1_1 HEAP$1_old_1)
          (cmp$1_0_1 (distinct n$1_0_1 0)))
         (let
            ((n.addr.0$1_0_1 n$1_0_1)
             (d.0$1_0_1 dst$1_0_1)
             (dst$2_0_1 dst$2_0_old_1)
             (s$2_0_1 s$2_0_old_1)
             (count$2_0_1 count$2_0_old_1))
            (let
               ((HEAP$2_1 HEAP$2_old_1)
                (inc$2_0_1 (+ count$2_0_1 1)))
               (let
                  ((count.addr.0$2_0_1 inc$2_0_1))
                  (let
                     ((a.0$2_0_1 dst$2_0_1)
                      (dec$2_0_1 (+ count.addr.0$2_0_1 (- 1))))
                     (let
                        ((tobool$2_0_1 (distinct dec$2_0_1 0)))
                        (=>
                           (and
                              (IN_INV dst$1_0_old_1 c$1_0_old_1 n$1_0_old_1 HEAP$1_old_1 dst$2_0_old_1 s$2_0_old_1 count$2_0_old_1 HEAP$2_old_1)
                              cmp$1_0_1
                              tobool$2_0_1)
                           (INV_MAIN_0 c$1_0_1 d.0$1_0_1 dst$1_0_1 n.addr.0$1_0_1 HEAP$1_1 a.0$2_0_1 dec$2_0_1 dst$2_0_1 s$2_0_1 HEAP$2_1))))))))))
(rule
   (let
      ((c$1_0_1 c$1_0_old_1))
      (let
         ((d.0$1_0_1 d.0$1_0_old_1)
          (dst$1_0_1 dst$1_0_old_1)
          (n.addr.0$1_0_1 n.addr.0$1_0_old_1)
          (HEAP$1_1 HEAP$1_old_1)
          (conv$1_0_1 c$1_0_1))
         (let
            ((incdec.ptr$1_0_1 (+ d.0$1_0_1 1))
             (HEAP$1_2 (store HEAP$1_1 d.0$1_0_1 conv$1_0_1))
             (dec$1_0_1 (+ n.addr.0$1_0_1 (- 1))))
            (let
               ((cmp1$1_0_1 (distinct dec$1_0_1 0)))
               (let
                  ((result$1_1 dst$1_0_1)
                   (HEAP$1_res_1 HEAP$1_2)
                   (a.0$2_0_1 a.0$2_0_old_1)
                   (dec$2_0_1 dec$2_0_old_1)
                   (dst$2_0_1 dst$2_0_old_1)
                   (s$2_0_1 s$2_0_old_1))
                  (let
                     ((HEAP$2_1 HEAP$2_old_1)
                      (conv$2_0_1 s$2_0_1))
                     (let
                        ((incdec.ptr$2_0_1 (+ a.0$2_0_1 1))
                         (HEAP$2_2 (store HEAP$2_1 a.0$2_0_1 conv$2_0_1))
                         (count.addr.0$2_0_1 dec$2_0_1))
                        (let
                           ((a.0$2_0_2 incdec.ptr$2_0_1)
                            (dec$2_0_2 (+ count.addr.0$2_0_1 (- 1))))
                           (let
                              ((tobool$2_0_1 (distinct dec$2_0_2 0)))
                              (let
                                 ((result$2_1 dst$2_0_1)
                                  (HEAP$2_res_1 HEAP$2_2))
                                 (=>
                                    (and
                                       (INV_MAIN_0 c$1_0_old_1 d.0$1_0_old_1 dst$1_0_old_1 n.addr.0$1_0_old_1 HEAP$1_old_1 a.0$2_0_old_1 dec$2_0_old_1 dst$2_0_old_1 s$2_0_old_1 HEAP$2_old_1)
                                       (not cmp1$1_0_1)
                                       (not tobool$2_0_1)
                                       (not (OUT_INV result$1_1 result$2_1 HEAP$1_2 HEAP$2_2)))
                                    END_QUERY))))))))))))
(rule
   (let
      ((c$1_0_1 c$1_0_old_1))
      (let
         ((d.0$1_0_1 d.0$1_0_old_1)
          (dst$1_0_1 dst$1_0_old_1)
          (n.addr.0$1_0_1 n.addr.0$1_0_old_1)
          (HEAP$1_1 HEAP$1_old_1)
          (conv$1_0_1 c$1_0_1))
         (let
            ((incdec.ptr$1_0_1 (+ d.0$1_0_1 1))
             (HEAP$1_2 (store HEAP$1_1 d.0$1_0_1 conv$1_0_1))
             (dec$1_0_1 (+ n.addr.0$1_0_1 (- 1))))
            (let
               ((cmp1$1_0_1 (distinct dec$1_0_1 0)))
               (let
                  ((n.addr.0$1_0_2 dec$1_0_1)
                   (d.0$1_0_2 incdec.ptr$1_0_1)
                   (a.0$2_0_1 a.0$2_0_old_1)
                   (dec$2_0_1 dec$2_0_old_1)
                   (dst$2_0_1 dst$2_0_old_1)
                   (s$2_0_1 s$2_0_old_1))
                  (let
                     ((HEAP$2_1 HEAP$2_old_1)
                      (conv$2_0_1 s$2_0_1))
                     (let
                        ((incdec.ptr$2_0_1 (+ a.0$2_0_1 1))
                         (HEAP$2_2 (store HEAP$2_1 a.0$2_0_1 conv$2_0_1))
                         (count.addr.0$2_0_1 dec$2_0_1))
                        (let
                           ((a.0$2_0_2 incdec.ptr$2_0_1)
                            (dec$2_0_2 (+ count.addr.0$2_0_1 (- 1))))
                           (let
                              ((tobool$2_0_1 (distinct dec$2_0_2 0)))
                              (=>
                                 (and
                                    (INV_MAIN_0 c$1_0_old_1 d.0$1_0_old_1 dst$1_0_old_1 n.addr.0$1_0_old_1 HEAP$1_old_1 a.0$2_0_old_1 dec$2_0_old_1 dst$2_0_old_1 s$2_0_old_1 HEAP$2_old_1)
                                    cmp1$1_0_1
                                    tobool$2_0_1)
                                 (INV_MAIN_0 c$1_0_1 d.0$1_0_2 dst$1_0_1 n.addr.0$1_0_2 HEAP$1_2 a.0$2_0_2 dec$2_0_2 dst$2_0_1 s$2_0_1 HEAP$2_2))))))))))))
(rule
   (let
      ((c$1_0_1 c$1_0_old_1))
      (let
         ((d.0$1_0_1 d.0$1_0_old_1)
          (dst$1_0_1 dst$1_0_old_1)
          (n.addr.0$1_0_1 n.addr.0$1_0_old_1)
          (HEAP$1_1 HEAP$1_old_1)
          (conv$1_0_1 c$1_0_1))
         (let
            ((incdec.ptr$1_0_1 (+ d.0$1_0_1 1))
             (HEAP$1_2 (store HEAP$1_1 d.0$1_0_1 conv$1_0_1))
             (dec$1_0_1 (+ n.addr.0$1_0_1 (- 1))))
            (let
               ((cmp1$1_0_1 (distinct dec$1_0_1 0)))
               (let
                  ((n.addr.0$1_0_2 dec$1_0_1)
                   (d.0$1_0_2 incdec.ptr$1_0_1))
                  (=>
                     (and
                        (INV_MAIN_0 c$1_0_old_1 d.0$1_0_old_1 dst$1_0_old_1 n.addr.0$1_0_old_1 HEAP$1_old_1 a.0$2_0_old_1 dec$2_0_old_1 dst$2_0_old_1 s$2_0_old_1 HEAP$2_old_1)
                        cmp1$1_0_1
                        (let
                           ((a.0$2_0_1 a.0$2_0_old_1)
                            (dec$2_0_1 dec$2_0_old_1)
                            (dst$2_0_1 dst$2_0_old_1)
                            (s$2_0_1 s$2_0_old_1))
                           (let
                              ((HEAP$2_1 HEAP$2_old_1)
                               (conv$2_0_1 s$2_0_1))
                              (let
                                 ((incdec.ptr$2_0_1 (+ a.0$2_0_1 1))
                                  (HEAP$2_2 (store HEAP$2_1 a.0$2_0_1 conv$2_0_1))
                                  (count.addr.0$2_0_1 dec$2_0_1))
                                 (let
                                    ((a.0$2_0_2 incdec.ptr$2_0_1)
                                     (dec$2_0_2 (+ count.addr.0$2_0_1 (- 1))))
                                    (let
                                       ((tobool$2_0_1 (distinct dec$2_0_2 0)))
                                       (not tobool$2_0_1)))))))
                     (INV_MAIN_0 c$1_0_1 d.0$1_0_2 dst$1_0_1 n.addr.0$1_0_2 HEAP$1_2 a.0$2_0_old_1 dec$2_0_old_1 dst$2_0_old_1 s$2_0_old_1 HEAP$2_old_1))))))))
(rule
   (let
      ((a.0$2_0_1 a.0$2_0_old_1)
       (dec$2_0_1 dec$2_0_old_1)
       (dst$2_0_1 dst$2_0_old_1)
       (s$2_0_1 s$2_0_old_1))
      (let
         ((HEAP$2_1 HEAP$2_old_1)
          (conv$2_0_1 s$2_0_1))
         (let
            ((incdec.ptr$2_0_1 (+ a.0$2_0_1 1))
             (HEAP$2_2 (store HEAP$2_1 a.0$2_0_1 conv$2_0_1))
             (count.addr.0$2_0_1 dec$2_0_1))
            (let
               ((a.0$2_0_2 incdec.ptr$2_0_1)
                (dec$2_0_2 (+ count.addr.0$2_0_1 (- 1))))
               (let
                  ((tobool$2_0_1 (distinct dec$2_0_2 0)))
                  (=>
                     (and
                        (INV_MAIN_0 c$1_0_old_1 d.0$1_0_old_1 dst$1_0_old_1 n.addr.0$1_0_old_1 HEAP$1_old_1 a.0$2_0_old_1 dec$2_0_old_1 dst$2_0_old_1 s$2_0_old_1 HEAP$2_old_1)
                        tobool$2_0_1
                        (let
                           ((c$1_0_1 c$1_0_old_1))
                           (let
                              ((d.0$1_0_1 d.0$1_0_old_1)
                               (dst$1_0_1 dst$1_0_old_1)
                               (n.addr.0$1_0_1 n.addr.0$1_0_old_1)
                               (HEAP$1_1 HEAP$1_old_1)
                               (conv$1_0_1 c$1_0_1))
                              (let
                                 ((incdec.ptr$1_0_1 (+ d.0$1_0_1 1))
                                  (HEAP$1_2 (store HEAP$1_1 d.0$1_0_1 conv$1_0_1))
                                  (dec$1_0_1 (+ n.addr.0$1_0_1 (- 1))))
                                 (let
                                    ((cmp1$1_0_1 (distinct dec$1_0_1 0)))
                                    (=>
                                       cmp1$1_0_1
                                       (let
                                          ((n.addr.0$1_0_2 dec$1_0_1)
                                           (d.0$1_0_2 incdec.ptr$1_0_1))
                                          false)))))))
                     (INV_MAIN_0 c$1_0_old_1 d.0$1_0_old_1 dst$1_0_old_1 n.addr.0$1_0_old_1 HEAP$1_old_1 a.0$2_0_2 dec$2_0_2 dst$2_0_1 s$2_0_1 HEAP$2_2))))))))
(query
   END_QUERY
   :print-certificate
   true)
