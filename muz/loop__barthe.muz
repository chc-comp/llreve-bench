;; Produced by llreve (commit dc2abeaa50d9197d51fa4223b58154246b164df0)
;; See https://formal.iti.kit.edu/reve and https://github.com/mattulbrich/llreve/
;; (c) 2018 KIT

(set-option
   :int-real-coercions
   false)
(declare-var
   c$1_0_old_1
   Int)
(declare-var
   c$2_0_old_1
   Int)
(declare-var
   i.0$1_0_old_1
   Int)
(declare-var
   i.0$2_0_old_1
   Int)
(declare-var
   j.0$2_0_old_1
   Int)
(declare-var
   n$1_0_old_1
   Int)
(declare-var
   n$2_0_old_1
   Int)
(declare-var
   x.0$1_0_old_1
   Int)
(declare-var
   x.0$2_0_old_1
   Int)
(declare-rel
   END_QUERY
   ())
(define-fun
   IN_INV
   ((n$1_0 Int)
    (c$1_0 Int)
    (n$2_0 Int)
    (c$2_0 Int))
   Bool
   (and
      (= n$1_0 n$2_0)
      (= c$1_0 c$2_0)))
(define-fun
   OUT_INV
   ((result$1 Int)
    (result$2 Int))
   Bool
   (= result$1 result$2))
; :annot (INV_MAIN_42 c$1_0 i.0$1_0 n$1_0 x.0$1_0 i.0$2_0 j.0$2_0 n$2_0 x.0$2_0)
(declare-rel
   INV_MAIN_42
   (Int
    Int
    Int
    Int
    Int
    Int
    Int
    Int))
(rule
   (let
      ((n$1_0_1 n$1_0_old_1)
       (c$1_0_1 c$1_0_old_1)
       (i.0$1_0_1 0)
       (x.0$1_0_1 0)
       (n$2_0_1 n$2_0_old_1)
       (c$2_0_1 c$2_0_old_1))
      (let
         ((i.0$2_0_1 0)
          (j.0$2_0_1 c$2_0_1)
          (x.0$2_0_1 0))
         (=>
            (IN_INV n$1_0_old_1 c$1_0_old_1 n$2_0_old_1 c$2_0_old_1)
            (INV_MAIN_42 c$1_0_1 i.0$1_0_1 n$1_0_1 x.0$1_0_1 i.0$2_0_1 j.0$2_0_1 n$2_0_1 x.0$2_0_1)))))
(rule
   (let
      ((c$1_0_1 c$1_0_old_1)
       (i.0$1_0_1 i.0$1_0_old_1)
       (n$1_0_1 n$1_0_old_1))
      (let
         ((x.0$1_0_1 x.0$1_0_old_1)
          (cmp$1_0_1 (< i.0$1_0_1 n$1_0_1)))
         (let
            ((result$1_1 x.0$1_0_1)
             (i.0$2_0_1 i.0$2_0_old_1)
             (j.0$2_0_1 j.0$2_0_old_1)
             (n$2_0_1 n$2_0_old_1))
            (let
               ((x.0$2_0_1 x.0$2_0_old_1)
                (cmp$2_0_1 (< i.0$2_0_1 n$2_0_1)))
               (let
                  ((result$2_1 x.0$2_0_1))
                  (=>
                     (and
                        (INV_MAIN_42 c$1_0_old_1 i.0$1_0_old_1 n$1_0_old_1 x.0$1_0_old_1 i.0$2_0_old_1 j.0$2_0_old_1 n$2_0_old_1 x.0$2_0_old_1)
                        (not cmp$1_0_1)
                        (not cmp$2_0_1)
                        (not (OUT_INV result$1_1 result$2_1)))
                     END_QUERY)))))))
(rule
   (let
      ((c$1_0_1 c$1_0_old_1)
       (i.0$1_0_1 i.0$1_0_old_1)
       (n$1_0_1 n$1_0_old_1))
      (let
         ((x.0$1_0_1 x.0$1_0_old_1)
          (cmp$1_0_1 (< i.0$1_0_1 n$1_0_1)))
         (let
            ((mul$1_0_1 (* 5 i.0$1_0_1)))
            (let
               ((add$1_0_1 (+ mul$1_0_1 c$1_0_1)))
               (let
                  ((add1$1_0_1 (+ x.0$1_0_1 add$1_0_1))
                   (inc$1_0_1 (+ i.0$1_0_1 1)))
                  (let
                     ((i.0$1_0_2 inc$1_0_1)
                      (x.0$1_0_2 add1$1_0_1)
                      (i.0$2_0_1 i.0$2_0_old_1)
                      (j.0$2_0_1 j.0$2_0_old_1)
                      (n$2_0_1 n$2_0_old_1))
                     (let
                        ((x.0$2_0_1 x.0$2_0_old_1)
                         (cmp$2_0_1 (< i.0$2_0_1 n$2_0_1)))
                        (let
                           ((add$2_0_1 (+ x.0$2_0_1 j.0$2_0_1))
                            (add1$2_0_1 (+ j.0$2_0_1 5))
                            (inc$2_0_1 (+ i.0$2_0_1 1)))
                           (let
                              ((i.0$2_0_2 inc$2_0_1)
                               (j.0$2_0_2 add1$2_0_1)
                               (x.0$2_0_2 add$2_0_1))
                              (=>
                                 (and
                                    (INV_MAIN_42 c$1_0_old_1 i.0$1_0_old_1 n$1_0_old_1 x.0$1_0_old_1 i.0$2_0_old_1 j.0$2_0_old_1 n$2_0_old_1 x.0$2_0_old_1)
                                    cmp$1_0_1
                                    cmp$2_0_1)
                                 (INV_MAIN_42 c$1_0_1 i.0$1_0_2 n$1_0_1 x.0$1_0_2 i.0$2_0_2 j.0$2_0_2 n$2_0_1 x.0$2_0_2))))))))))))
(rule
   (let
      ((c$1_0_1 c$1_0_old_1)
       (i.0$1_0_1 i.0$1_0_old_1)
       (n$1_0_1 n$1_0_old_1))
      (let
         ((x.0$1_0_1 x.0$1_0_old_1)
          (cmp$1_0_1 (< i.0$1_0_1 n$1_0_1)))
         (let
            ((mul$1_0_1 (* 5 i.0$1_0_1)))
            (let
               ((add$1_0_1 (+ mul$1_0_1 c$1_0_1)))
               (let
                  ((add1$1_0_1 (+ x.0$1_0_1 add$1_0_1))
                   (inc$1_0_1 (+ i.0$1_0_1 1)))
                  (let
                     ((i.0$1_0_2 inc$1_0_1)
                      (x.0$1_0_2 add1$1_0_1))
                     (=>
                        (and
                           (INV_MAIN_42 c$1_0_old_1 i.0$1_0_old_1 n$1_0_old_1 x.0$1_0_old_1 i.0$2_0_old_1 j.0$2_0_old_1 n$2_0_old_1 x.0$2_0_old_1)
                           cmp$1_0_1
                           (let
                              ((i.0$2_0_1 i.0$2_0_old_1)
                               (j.0$2_0_1 j.0$2_0_old_1)
                               (n$2_0_1 n$2_0_old_1))
                              (let
                                 ((x.0$2_0_1 x.0$2_0_old_1)
                                  (cmp$2_0_1 (< i.0$2_0_1 n$2_0_1)))
                                 (=>
                                    cmp$2_0_1
                                    (let
                                       ((add$2_0_1 (+ x.0$2_0_1 j.0$2_0_1))
                                        (add1$2_0_1 (+ j.0$2_0_1 5))
                                        (inc$2_0_1 (+ i.0$2_0_1 1)))
                                       (let
                                          ((i.0$2_0_2 inc$2_0_1)
                                           (j.0$2_0_2 add1$2_0_1)
                                           (x.0$2_0_2 add$2_0_1))
                                          false))))))
                        (INV_MAIN_42 c$1_0_1 i.0$1_0_2 n$1_0_1 x.0$1_0_2 i.0$2_0_old_1 j.0$2_0_old_1 n$2_0_old_1 x.0$2_0_old_1)))))))))
(rule
   (let
      ((i.0$2_0_1 i.0$2_0_old_1)
       (j.0$2_0_1 j.0$2_0_old_1)
       (n$2_0_1 n$2_0_old_1))
      (let
         ((x.0$2_0_1 x.0$2_0_old_1)
          (cmp$2_0_1 (< i.0$2_0_1 n$2_0_1)))
         (let
            ((add$2_0_1 (+ x.0$2_0_1 j.0$2_0_1))
             (add1$2_0_1 (+ j.0$2_0_1 5))
             (inc$2_0_1 (+ i.0$2_0_1 1)))
            (let
               ((i.0$2_0_2 inc$2_0_1)
                (j.0$2_0_2 add1$2_0_1)
                (x.0$2_0_2 add$2_0_1))
               (=>
                  (and
                     (INV_MAIN_42 c$1_0_old_1 i.0$1_0_old_1 n$1_0_old_1 x.0$1_0_old_1 i.0$2_0_old_1 j.0$2_0_old_1 n$2_0_old_1 x.0$2_0_old_1)
                     cmp$2_0_1
                     (let
                        ((c$1_0_1 c$1_0_old_1)
                         (i.0$1_0_1 i.0$1_0_old_1)
                         (n$1_0_1 n$1_0_old_1))
                        (let
                           ((x.0$1_0_1 x.0$1_0_old_1)
                            (cmp$1_0_1 (< i.0$1_0_1 n$1_0_1)))
                           (=>
                              cmp$1_0_1
                              (let
                                 ((mul$1_0_1 (* 5 i.0$1_0_1)))
                                 (let
                                    ((add$1_0_1 (+ mul$1_0_1 c$1_0_1)))
                                    (let
                                       ((add1$1_0_1 (+ x.0$1_0_1 add$1_0_1))
                                        (inc$1_0_1 (+ i.0$1_0_1 1)))
                                       (let
                                          ((i.0$1_0_2 inc$1_0_1)
                                           (x.0$1_0_2 add1$1_0_1))
                                          false))))))))
                  (INV_MAIN_42 c$1_0_old_1 i.0$1_0_old_1 n$1_0_old_1 x.0$1_0_old_1 i.0$2_0_2 j.0$2_0_2 n$2_0_1 x.0$2_0_2)))))))
(query
   END_QUERY
   :print-certificate
   true)
